cscope 15 $HOME/server_frame/trunk/asyncserv -q 0000000936 0000093111
	@binding.cpp

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~<sys/sockë.h
>

6 
	~<¨∑/öë.h
>

7 
	~<sys/mm™.h
>

10 
	~<libcomm⁄/log.h
>

11 
	~<libcomm⁄/c⁄f_∑r£r/c⁄fig.h
>

12 
	~<libcomm⁄/öë/t˝.h
>

15 
	~"bödög.hµ
"

17 
BödM™age
 
g_böds
;

20 
	gBödEÀm
::
	$öô_shmq
()

22 
£ndq
.
	`¸óã
();

23 
ªcvq
.
	`¸óã
();

24 
	}
}

27 
	gBödEÀm
::
	$˛o£_shmq
(
is_∑ª¡_Êag
)

29 i‡(!
is_∑ª¡_Êag
) {

30 
£ndq
.
	`˛o£_pùe
(0);

31 
ªcvq
.
	`˛o£_pùe
(1);

33 
£ndq
.
	`˛o£_pùe
(1);

34 
ªcvq
.
	`˛o£_pùe
(0);

36 
	}
}

39 
	gBödEÀm
::
	$de°roy_shmq
()

41 
£ndq
.
	`de°roy
();

42 
ªcvq
.
	`de°roy
();

43 
	}
}

46 
	gBödEÀm
::
	$add_pùe_c⁄n
(
pùe_ty≥
)

48 i‡(
pùe_ty≥
 =
em_£nd_pùe
) {

49 
g_sock_c⁄n
.
	`add_⁄e_c⁄n
(
£ndq
.
	`gë_pùe_h™dÀ
(0), 
em_fd_ty≥_pùe
, 0, 
this
);

50 } i‡(
pùe_ty≥
 =
em_ªcv_pùe
) {

51 
g_sock_c⁄n
.
	`add_⁄e_c⁄n
(
ªcvq
.
	`gë_pùe_h™dÀ
(0), 
em_fd_ty≥_pùe
, 0, 0);

55 
	}
}

59 
	gBödEÀm
::
	$add_li°í_c⁄n
()

61 
ªt_code
 = -1;

63 
li°ífd
 = 
	`ß„_sockë_li°í
(
böd_ù
, 
böd_p‹t
, 
SOCK_STREAM
, 1024, 32 * 1024);

64 i‡(
li°ífd
 != -1) {

66 
	`£t_io_blockabûôy
(
li°ífd
, 1);

69 
g_sock_c⁄n
.
	`add_⁄e_c⁄n
(
li°ífd
, 
em_fd_ty≥_li°í
, 0, 
this
);

70 
ªt_code
 = 0;

73 
	`BOOT_LOG
(
ªt_code
, "Li°í o¿%s:%u", (
böd_ù
 ? böd_ù : "ANYADDR"), 
böd_p‹t
);

74 
	}
}

77 
	gBödM™age
::
	$BödM™age
()

79 
böd_num
 = 0;

80 
	}
}

82 
	gBödM™age
::~
	$BödM™age
()

85 
	}
}

93 
BödM™age
::
	$lﬂd_böd_fûe
(c⁄° * 
fûe_«me
)

95 c⁄° 
˙_max_fõld_num
 = 4;

96 
ªt_code
 = -1;

97 * 
buf
;

99 i‡(
	`mm≠_c⁄fig_fûe
(
fûe_«me
, &
buf
) > 0 ) {

100 * 
°¨t
 = 
buf
;

101 * 
íd
;

102 * 
fõld
[
˙_max_fõld_num
];

104 
size_t
 
Àn
 = 
	`°æí
(
buf
);

105 
buf
 + 
Àn
 > 
°¨t
) {

106 
íd
 = 
	`°rchr
(
°¨t
, '\n');

107 i‡–
íd
 && *end ) {

108 *
íd
 = '\0';

110 i‡–(*
°¨t
 !'#'Ë&& (
	`°r_•lô
(0, sèπ, 
fõld
, 
˙_max_fõld_num
) == cn_max_field_num) ) {

111 
BödEÀm
* 
bc
 = &(
c⁄figs
[
böd_num
]);

112 
bc
->
£rvî_id
 = 
	`©oi
(
fõld
[0]);

113 
	`°∫˝y
(
bc
->
£rvî_«me
, 
fõld
[1], (bc->server_name) - 1);

114 
	`°∫˝y
(
bc
->
böd_ù
, 
fõld
[2], (bc->bind_ip) - 1);

115 
bc
->
böd_p‹t
 = 
	`©oi
(
fõld
[3]);

117 ++(
böd_num
);

119 
°¨t
 = 
íd
 + 1;

121 i‡(
böd_num
 > 
max_li°í_fds
) {

122 
	`BOOT_LOG
(
ªt_code
, "bödÇumÜ¨gîÅh™ max fds[%d %d]:%s", 
böd_num
, 
max_li°í_fds
, 
fûe_«me
);

126 
	`munm≠
(
buf
, 
Àn
);

127 
ªt_code
 = 0;

130 
	`BOOT_LOG
(
ªt_code
, "lﬂd böd fûe:%s", 
fûe_«me
);

131 
	}
}

134 
	gBödM™age
::
	$˛o£_shmq_pùes
(
idx
, 
is_∑ª¡_Êag
)

136 
i
 = 0; i < 
idx
; i++) {

137 
c⁄figs
[
i
].
	`˛o£_shmq
(
is_∑ª¡_Êag
);

139 
	}
}

142 
	gBödM™age
::
	$de°roy_Æl_shmq
()

144 
i
 = 0; i < 
böd_num
; i++) {

145 
c⁄figs
[
i
].
	`de°roy_shmq
();

147 
	}
}

150 
	gBödM™age
::
	$de°roy_Æl_shmq_ex˚≥t_⁄e
(
BödEÀm
* 
bc_ñem
)

152 
i
 = 0; i < 
böd_num
; i++) {

153 
BödEÀm
* 
ñem
 = &(
c⁄figs
[
i
]);

154 i‡(
bc_ñem
 !
ñem
) {

155 
ñem
->
	`de°roy_shmq
();

158 
	}
}

	@binding.hpp

1 #i‚de‡
ASYNC_SERVER_BIND_CONF_H_


2 
	#ASYNC_SERVER_BIND_CONF_H_


	)

5 
	~<√töë/ö.h
>

7 
	~"shmq.hµ
"

10 
	mmax_li°í_fds
 = 200

13 
	e¥o˚ss_ty≥_t
 {

14 
	mem_chûd_ty≥
 = 0,

15 
	mem_∑ª¡_ty≥
 = 1,

18 
	epùe_ty≥_t
 {

19 
	mem_£nd_pùe
 = 0,

20 
	mem_ªcv_pùe
 = 1,

23 ˛as†
	cBödEÀm
 {

24 
	mpublic
:

25 
	$BödEÀm
(){}

26 ~
	$BödEÀm
(){
	}
}

28 
öô_shmq
();

29 
˛o£_shmq
(
is_∑ª¡_Êag
);

30 
de°roy_shmq
();

32 
add_pùe_c⁄n
(
pùe_ty≥
);

33 
add_li°í_c⁄n
();

34 
	gpublic
:

35 
uöt32_t
 
£rvî_id
;

36 
	g£rvî_«me
[16];

37 
	gböd_ù
[16];

38 
ö_p‹t_t
 
	gböd_p‹t
;

39 
uöt8_t
 
	gª°¨t_˙t
;

40 
ShmqQueue
 
	g£ndq
;

41 
ShmqQueue
 
	gªcvq
;

44 ˛as†
	cBödM™age
 {

45 
	mpublic
:

46 
BödM™age
();

47 ~
BödM™age
();

49 
lﬂd_böd_fûe
(c⁄° * 
fûe_«me
);

51 
ölöe
 
	$gë_böd_c⁄f_idx
(c⁄° 
BödEÀm
* 
bc_ñem
)

52 { (
bc_ñem
 - &(
c⁄figs
[0]));}

54 
	`˛o£_shmq_pùes
(
idx
, 
is_∑ª¡_Êag
);

55 
	`de°roy_Æl_shmq
();

56 
	`de°roy_Æl_shmq_ex˚≥t_⁄e
(
BödEÀm
* 
bc_ñem
);

58 
public
:

59 
böd_num
;

60 
BödEÀm
 
c⁄figs
[
max_li°í_fds
];

61 
	}
};

63 
BödM™age
 
g_böds
;

	@build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c

1 #ifde‡
__˝lu•lus


5 #i‡
deföed
(
__18CXX
)

6 
	#ID_VOID_MAIN


	)

9 #i‡
deföed
(
__INTEL_COMPILER
Ë|| deföed(
__ICC
)

10 
	#COMPILER_ID
 "I¡ñ"

	)

12 #ñi‡
deföed
(
__BORLANDC__
)

13 
	#COMPILER_ID
 "B‹œnd"

	)

15 #ñi‡
deföed
(
__WATCOMC__
)

16 
	#COMPILER_ID
 "W©com"

	)

18 #ñi‡
deföed
(
__SUNPRO_C
)

19 
	#COMPILER_ID
 "SunPro"

	)

21 #ñi‡
deföed
(
__HP_cc
)

22 
	#COMPILER_ID
 "HP"

	)

24 #ñi‡
deföed
(
__DECC
)

25 
	#COMPILER_ID
 "Com∑q"

	)

27 #ñi‡
deföed
(
__IBMC__
)

28 
	#COMPILER_ID
 "VisuÆAge"

	)

30 #ñi‡
deföed
(
__PGI
)

31 
	#COMPILER_ID
 "PGI"

	)

33 #ñi‡
deföed
(
__GNUC__
)

34 
	#COMPILER_ID
 "GNU"

	)

36 #ñi‡
deföed
(
_MSC_VER
)

37 
	#COMPILER_ID
 "MSVC"

	)

39 #ñi‡
deföed
(
__ADSPBLACKFIN__
Ë|| deföed(
__ADSPTS__
Ë|| deföed(
__ADSP21000__
)

42 
	#COMPILER_ID
 "ADSP"

	)

52 #ñi‡
deföed
(
SDCC
)

53 
	#COMPILER_ID
 "SDCC"

	)

55 #ñi‡
deföed
(
_COMPILER_VERSION
)

56 
	#COMPILER_ID
 "MIPS¥o"

	)

61 #ñi‡
deföed
(
__sgi
)

62 
	#COMPILER_ID
 "MIPS¥o"

	)

64 #ñi‡
deföed
(
__hpux
Ë|| deföed(
__hpua
)

65 
	#COMPILER_ID
 "HP"

	)

68 
	#COMPILER_ID
 ""

	)

76 * 
	göfo_compûî
 = "INFO" ":" "compûî[" 
COMPILER_ID
 "]";

79 #i‡
deföed
(
__löux
Ë|| deföed(
__löux__
Ë|| deföed(
löux
)

80 
	#PLATFORM_ID
 "Löux"

	)

82 #ñi‡
deföed
(
__CYGWIN__
)

83 
	#PLATFORM_ID
 "Cygwö"

	)

85 #ñi‡
deföed
(
__MINGW32__
)

86 
	#PLATFORM_ID
 "MöGW"

	)

88 #ñi‡
deföed
(
__APPLE__
)

89 
	#PLATFORM_ID
 "D¨wö"

	)

91 #ñi‡
deföed
(
_WIN32
Ë|| deföed(
__WIN32__
Ë|| deföed(
WIN32
)

92 
	#PLATFORM_ID
 "Wödows"

	)

94 #ñi‡
deföed
(
__FªeBSD__
Ë|| deföed(
__FªeBSD
)

95 
	#PLATFORM_ID
 "FªeBSD"

	)

97 #ñi‡
deföed
(
__NëBSD__
Ë|| deföed(
__NëBSD
)

98 
	#PLATFORM_ID
 "NëBSD"

	)

100 #ñi‡
deföed
(
__O≥nBSD__
Ë|| deföed(
__OPENBSD
)

101 
	#PLATFORM_ID
 "O≥nBSD"

	)

103 #ñi‡
deföed
(
__sun
Ë|| deföed(
sun
)

104 
	#PLATFORM_ID
 "SunOS"

	)

106 #ñi‡
deföed
(
_AIX
Ë|| deföed(
__AIX
Ë|| deföed(
__AIX__
Ë|| deföed(
__aix
Ë|| deföed(
__aix__
)

107 
	#PLATFORM_ID
 "AIX"

	)

109 #ñi‡
deföed
(
__sgi
Ë|| deföed(
__sgi__
Ë|| deföed(
_SGI
)

110 
	#PLATFORM_ID
 "IRIX"

	)

112 #ñi‡
deföed
(
__hpux
Ë|| deföed(
__hpux__
)

113 
	#PLATFORM_ID
 "HP-UX"

	)

115 #ñi‡
deföed
(
__HAIKU
Ë|| deföed(
__HAIKU__
Ë|| deföed(
_HAIKU
)

116 
	#PLATFORM_ID
 "Haiku"

	)

121 #ñi‡
deföed
(
__BeOS
Ë|| deföed(
__BEOS__
Ë|| deföed(
_BEOS
)

122 
	#PLATFORM_ID
 "BeOS"

	)

124 #ñi‡
deföed
(
__QNX__
Ë|| deföed(
__QNXNTO__
)

125 
	#PLATFORM_ID
 "QNX"

	)

127 #ñi‡
deföed
(
__åu64
Ë|| deföed(
_åu64
Ë|| deföed(
__TRU64__
)

128 
	#PLATFORM_ID
 "Tru64"

	)

130 #ñi‡
deföed
(
__riscos
Ë|| deföed(
__riscos__
)

131 
	#PLATFORM_ID
 "RISCos"

	)

133 #ñi‡
deföed
(
__söix
Ë|| deföed(
__söix__
Ë|| deföed(
__SINIX__
)

134 
	#PLATFORM_ID
 "SINIX"

	)

136 #ñi‡
deföed
(
__UNIX_SV__
)

137 
	#PLATFORM_ID
 "UNIX_SV"

	)

139 #ñi‡
deföed
(
__bsdos__
)

140 
	#PLATFORM_ID
 "BSDOS"

	)

142 #ñi‡
deföed
(
_MPRAS
Ë|| deföed(
MPRAS
)

143 
	#PLATFORM_ID
 "MP-RAS"

	)

145 #ñi‡
deföed
(
__osf
Ë|| deföed(
__osf__
)

146 
	#PLATFORM_ID
 "OSF1"

	)

148 #ñi‡
deföed
(
_SCO_SV
Ë|| deföed(
SCO_SV
Ë|| deföed(
sco_sv
)

149 
	#PLATFORM_ID
 "SCO_SV"

	)

151 #ñi‡
deföed
(
__u…rix
Ë|| deföed(
__u…rix__
Ë|| deföed(
_ULTRIX
)

152 
	#PLATFORM_ID
 "ULTRIX"

	)

154 #ñi‡
deföed
(
__XENIX__
Ë|| deföed(
_XENIX
Ë|| deföed(
XENIX
)

155 
	#PLATFORM_ID
 "Xíix"

	)

158 
	#PLATFORM_ID
 ""

	)

166 * 
	göfo_∂©f‹m
 = "INFO" ":" "∂©f‹m[" 
PLATFORM_ID
 "]";

171 #ifde‡
ID_VOID_MAIN


172 
	$maö
(Ë{
	}
}

174 
	$maö
(
¨gc
, * 
¨gv
[])

176 
ªquúe
 = 0;

177 
ªquúe
 +
öfo_compûî
[
¨gc
];

178 
ªquúe
 +
öfo_∂©f‹m
[
¨gc
];

179 ()
¨gv
;

180  
ªquúe
;

181 
	}
}

	@build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp

4 #i‚de‡
__˝lu•lus


8 #i‡
deföed
(
__COMO__
)

9 
	#COMPILER_ID
 "Comóu"

	)

11 #ñi‡
deföed
(
__INTEL_COMPILER
Ë|| deföed(
__ICC
)

12 
	#COMPILER_ID
 "I¡ñ"

	)

14 #ñi‡
deföed
(
__BORLANDC__
)

15 
	#COMPILER_ID
 "B‹œnd"

	)

17 #ñi‡
deföed
(
__WATCOMC__
)

18 
	#COMPILER_ID
 "W©com"

	)

20 #ñi‡
deföed
(
__SUNPRO_CC
)

21 
	#COMPILER_ID
 "SunPro"

	)

23 #ñi‡
deföed
(
__HP_aCC
)

24 
	#COMPILER_ID
 "HP"

	)

26 #ñi‡
deföed
(
__DECCXX
)

27 
	#COMPILER_ID
 "Com∑q"

	)

29 #ñi‡
deföed
(
__IBMCPP__
)

30 
	#COMPILER_ID
 "VisuÆAge"

	)

32 #ñi‡
deföed
(
__PGI
)

33 
	#COMPILER_ID
 "PGI"

	)

35 #ñi‡
deföed
(
__GNUC__
)

36 
	#COMPILER_ID
 "GNU"

	)

38 #ñi‡
deföed
(
_MSC_VER
)

39 
	#COMPILER_ID
 "MSVC"

	)

41 #ñi‡
deföed
(
__ADSPBLACKFIN__
Ë|| deföed(
__ADSPTS__
Ë|| deföed(
__ADSP21000__
)

44 
	#COMPILER_ID
 "ADSP"

	)

46 #ñi‡
deföed
(
_COMPILER_VERSION
)

47 
	#COMPILER_ID
 "MIPS¥o"

	)

52 #ñi‡
deföed
(
__sgi
)

53 
	#COMPILER_ID
 "MIPS¥o"

	)

55 #ñi‡
deföed
(
__hpux
Ë|| deföed(
__hpua
)

56 
	#COMPILER_ID
 "HP"

	)

59 
	#COMPILER_ID
 ""

	)

67 * 
	göfo_compûî
 = "INFO" ":" "compûî[" 
COMPILER_ID
 "]";

70 #i‡
deföed
(
__löux
Ë|| deföed(
__löux__
Ë|| deföed(
löux
)

71 
	#PLATFORM_ID
 "Löux"

	)

73 #ñi‡
deföed
(
__CYGWIN__
)

74 
	#PLATFORM_ID
 "Cygwö"

	)

76 #ñi‡
deföed
(
__MINGW32__
)

77 
	#PLATFORM_ID
 "MöGW"

	)

79 #ñi‡
deföed
(
__APPLE__
)

80 
	#PLATFORM_ID
 "D¨wö"

	)

82 #ñi‡
deföed
(
_WIN32
Ë|| deföed(
__WIN32__
Ë|| deföed(
WIN32
)

83 
	#PLATFORM_ID
 "Wödows"

	)

85 #ñi‡
deföed
(
__FªeBSD__
Ë|| deföed(
__FªeBSD
)

86 
	#PLATFORM_ID
 "FªeBSD"

	)

88 #ñi‡
deföed
(
__NëBSD__
Ë|| deföed(
__NëBSD
)

89 
	#PLATFORM_ID
 "NëBSD"

	)

91 #ñi‡
deföed
(
__O≥nBSD__
Ë|| deföed(
__OPENBSD
)

92 
	#PLATFORM_ID
 "O≥nBSD"

	)

94 #ñi‡
deföed
(
__sun
Ë|| deföed(
sun
)

95 
	#PLATFORM_ID
 "SunOS"

	)

97 #ñi‡
deföed
(
_AIX
Ë|| deföed(
__AIX
Ë|| deföed(
__AIX__
Ë|| deföed(
__aix
Ë|| deföed(
__aix__
)

98 
	#PLATFORM_ID
 "AIX"

	)

100 #ñi‡
deföed
(
__sgi
Ë|| deföed(
__sgi__
Ë|| deföed(
_SGI
)

101 
	#PLATFORM_ID
 "IRIX"

	)

103 #ñi‡
deföed
(
__hpux
Ë|| deföed(
__hpux__
)

104 
	#PLATFORM_ID
 "HP-UX"

	)

106 #ñi‡
deföed
(
__HAIKU
Ë|| deföed(
__HAIKU__
Ë|| deföed(
_HAIKU
)

107 
	#PLATFORM_ID
 "Haiku"

	)

112 #ñi‡
deföed
(
__BeOS
Ë|| deföed(
__BEOS__
Ë|| deföed(
_BEOS
)

113 
	#PLATFORM_ID
 "BeOS"

	)

115 #ñi‡
deföed
(
__QNX__
Ë|| deföed(
__QNXNTO__
)

116 
	#PLATFORM_ID
 "QNX"

	)

118 #ñi‡
deföed
(
__åu64
Ë|| deföed(
_åu64
Ë|| deföed(
__TRU64__
)

119 
	#PLATFORM_ID
 "Tru64"

	)

121 #ñi‡
deföed
(
__riscos
Ë|| deföed(
__riscos__
)

122 
	#PLATFORM_ID
 "RISCos"

	)

124 #ñi‡
deföed
(
__söix
Ë|| deföed(
__söix__
Ë|| deföed(
__SINIX__
)

125 
	#PLATFORM_ID
 "SINIX"

	)

127 #ñi‡
deföed
(
__UNIX_SV__
)

128 
	#PLATFORM_ID
 "UNIX_SV"

	)

130 #ñi‡
deföed
(
__bsdos__
)

131 
	#PLATFORM_ID
 "BSDOS"

	)

133 #ñi‡
deföed
(
_MPRAS
Ë|| deföed(
MPRAS
)

134 
	#PLATFORM_ID
 "MP-RAS"

	)

136 #ñi‡
deföed
(
__osf
Ë|| deföed(
__osf__
)

137 
	#PLATFORM_ID
 "OSF1"

	)

139 #ñi‡
deföed
(
_SCO_SV
Ë|| deföed(
SCO_SV
Ë|| deföed(
sco_sv
)

140 
	#PLATFORM_ID
 "SCO_SV"

	)

142 #ñi‡
deföed
(
__u…rix
Ë|| deföed(
__u…rix__
Ë|| deföed(
_ULTRIX
)

143 
	#PLATFORM_ID
 "ULTRIX"

	)

145 #ñi‡
deföed
(
__XENIX__
Ë|| deföed(
_XENIX
Ë|| deföed(
XENIX
)

146 
	#PLATFORM_ID
 "Xíix"

	)

149 
	#PLATFORM_ID
 ""

	)

157 * 
	göfo_∂©f‹m
 = "INFO" ":" "∂©f‹m[" 
PLATFORM_ID
 "]";

162 
	$maö
(
¨gc
, * 
¨gv
[])

164 
ªquúe
 = 0;

165 
ªquúe
 +
öfo_compûî
[
¨gc
];

166 
ªquúe
 +
öfo_∂©f‹m
[
¨gc
];

167 ()
¨gv
;

168  
ªquúe
;

169 
	}
}

	@daemon.cpp

1 
	~<°d¨g.h
>

2 
	~<°dlib.h
>

3 
	~<sys/°©.h
>

4 
	~<°rög.h
>

5 
	~<°dio.h
>

6 
	~<î∫o.h
>

7 
	~<sig«l.h
>

8 
	~<uni°d.h
>

9 
	~<time.h
>

10 
	~<sys/mm™.h
>

11 
	~<sys/ªsour˚.h
>

12 
	~<sys/waô.h
>

13 
	~<löux/uni°d.h
>

16 
	~<libcomm⁄/log.h
>

17 
	~<libcomm⁄/c⁄f_∑r£r/c⁄fig.h
>

19 
	~"shmq.hµ
"

20 
	~"d´m⁄.hµ
"

23 
D´m⁄
 
g_d´m⁄
;

25 
	$sigãrm_h™dÀr
(
signo
)

27 
	`DEBUG_LOG
("sigãrm_h™dÀr[%d]",
signo
);

28 
g_d´m⁄
.
°›_Êag
 = 1;

29 
g_d´m⁄
.
ª°¨t_Êag
 = 0;

30 
g_d´m⁄
.
ãrm_sig«l
 = 1;

31 
	}
}

33 
	$sighup_h™dÀr
(
signo
)

35 
	`DEBUG_LOG
("sighup_h™dÀr[%d]",
signo
);

36 
g_d´m⁄
.
ª°¨t_Êag
 = 1;

37 
g_d´m⁄
.
°›_Êag
 = 1;

38 
	}
}

40 
	$sigchld_h™dÀr
(
signo
, 
sigöfo_t
 *
si
, * 
p
)

42 
	`DEBUG_LOG
("sigchld_h™dÀr[%d]",
signo
);

43 
pid_t
 
pid
;

44 (
pid
 = 
	`waôpid
 (-1, &
g_d´m⁄
.
°©us
, 
WNOHANG
)) > 0) {

45 
i
;

46 
i
 = 0; i < 
g_böds
.
böd_num
; ++i) {

47 i‡(
g_d´m⁄
.
	`gë_chûd_pid
(
i
Ë=
pid
) {

48 
g_d´m⁄
.
	`£t_chûd_pid
(
i
,0);

53 
	}
}

55 
	gD´m⁄
::
	$D´m⁄
()

57 
°›_Êag
 = 0;

58 
ª°¨t_Êag
 = 0;

59 
ãrm_sig«l
 = 0;

61 
ßved_¨gv
 = 
NULL
;

62 
backgd_mode
 = 0;

63 
	}
}

65 
	gD´m⁄
::~
	$D´m⁄
()

68 
	}
}

71 
D´m⁄
::
	$£t_¥oc_tôÀ
(c⁄° * 
fmt
, ...)

73 
tôÀ
[128];

74 
va_li°
 
≠
;

76 
	`va_°¨t
(
≠
, 
fmt
);

77 
	`v¢¥ötf
(
tôÀ
, —ôÀË- 1, 
fmt
, 
≠
);

78 
	`va_íd
(
≠
);

80 
tôÀ_Àn
 = 
	`°æí
(
tôÀ
) + 1;

81 i‡(
¨gv_íd
 - 
¨gv_begö
 < 
tôÀ_Àn
 && 
ív_begö
 ==árgv_end) {

82 *
ív_íd
 = 
ív_begö
;

83 
i
 = 0; 
ívú⁄
[i]; i++) {

84 if(
ív_íd
 =
ívú⁄
[
i
]) {

85 
ív_íd
 = 
ívú⁄
[
i
] + 
	`°æí
 (environ[i]) + 1;

86 
ívú⁄
[
i
] = 
	`°rdup
(environ[i]);

91 
¨gv_íd
 = 
ív_íd
;

92 
ív_begö
 = 
NULL
;

95 
¨gv_Àn
 = 
¨gv_íd
 - 
¨gv_begö
;

96 i‡(
tôÀ_Àn
 =
¨gv_Àn
) {

97 
	`°r˝y
 (
¨gv_begö
, 
tôÀ
);

98 } i‡(
tôÀ_Àn
 < 
¨gv_Àn
) {

99 
	`°r˝y
 (
¨gv_begö
, 
tôÀ
);

100 
	`mem£t
 (
¨gv_begö
 + 
tôÀ_Àn
, 0, 
¨gv_Àn
 -Åitle_len);

102 
	`°≤˝y
(
¨gv_begö
, 
tôÀ
, 
¨gv_Àn
 - 1)[0] = '\0';

104 
	}
}

107 
	gD´m⁄
::
	$£t_æimô
()

109 
æimô
 
æim
;

110 
max_fd_num
 = 
	`c⁄fig_gë_ötvÆ
("max_open_fd", 20000);

113 
æim
.
æim_cur
 = 
max_fd_num
;

114 
æim
.
æim_max
 = 
max_fd_num
;

115 i‡(
	`£ålimô
(
RLIMIT_NOFILE
, &
æim
) == -1) {

116 
	`ALERT_LOG
("INIT FD RESOURCE FAILED");

120 
æim
.
æim_cur
 = 1 << 30;

121 
æim
.
æim_max
 = 1 << 30;

122 i‡(
	`£ålimô
(
RLIMIT_CORE
, &
æim
) == -1) {

123 
	`ALERT_LOG
("INIT CORE FILE RESOURCE FAILED");

125 
	}
}

128 
	gD´m⁄
::
	$föi_‰ì
()

130 ** 
¨gv
;

131  
¨gv
 = 
ßved_¨gv
; *argv; ++argv ) {

132 
	`‰ì
(*
¨gv
);

134 
	`‰ì
(
ßved_¨gv
);

135 
ßved_¨gv
 = 
NULL
;

137 
	`‰ì
(
¥og_«me
);

138 
	`‰ì
(
cuºít_dú
);

139 
	}
}

142 
	gD´m⁄
::
	$dup_¨gv
(
¨gc
, ** 
¨gv
)

144 
¨gv_begö
 = 
¨gv
[0];

145 
¨gv_íd
 = 
¨gv
[
¨gc
-1] + 
	`°æí
(argv[argc - 1]) + 1;

146 
ív_begö
 = 
ívú⁄
[0];

148 
ßved_¨gv
 = (**)
	`mÆloc
((*Ë* (
¨gc
 + 1));

149 i‡(!
ßved_¨gv
) {

152 
ßved_¨gv
[
¨gc
] = 
NULL
;

153 --
¨gc
 >= 0) {

154 
ßved_¨gv
[
¨gc
] = 
	`°rdup
(
¨gv
[argc]);

156 
	}
}

159 
	gD´m⁄
::
	$öô_sig«l
()

161 
siga˘i⁄
 
ß
;

162 
sig£t_t
 
s£t
;

164 
	`mem£t
(&
ß
, 0, (sa));

165 
	`sig«l
(
SIGPIPE
,
SIG_IGN
);

167 
ß
.
ß_h™dÀr
 = 
sighup_h™dÀr
;

168 
	`siga˘i⁄
(
SIGHUP
, &
ß
, 
NULL
);

170 
ß
.
ß_h™dÀr
 = 
sigãrm_h™dÀr
;

171 
	`siga˘i⁄
(
SIGINT
, &
ß
, 
NULL
);

172 
	`siga˘i⁄
(
SIGTERM
, &
ß
, 
NULL
);

173 
	`siga˘i⁄
(
SIGQUIT
, &
ß
, 
NULL
);

175 
ß
.
ß_Êags
 = 
SA_RESTART
|
SA_SIGINFO
;

176 
ß
.
ß_siga˘i⁄
 = 
sigchld_h™dÀr
;

177 
	`siga˘i⁄
(
SIGCHLD
, &
ß
, 
NULL
);

179 
	`sigem±y£t
(&
s£t
);

180 
	`sigadd£t
(&
s£t
, 
SIGABRT
);

181 
	`sigadd£t
(&
s£t
, 
SIGILL
);

182 
	`sigadd£t
(&
s£t
, 
SIGCHLD
);

183 
	`sigadd£t
(&
s£t
, 
SIGSEGV
);

184 
	`sigadd£t
(&
s£t
, 
SIGBUS
);

185 
	`sigadd£t
(&
s£t
, 
SIGFPE
);

186 
	`sig¥ocmask
(
SIG_UNBLOCK
, &
s£t
, &sset);

187 
	}
}

190 
	gD´m⁄
::
	$°¨t
(
¨gc
, ** 
¨gv
)

192 
	`£t_æimô
();

193 
	`öô_sig«l
();

194 
	`dup_¨gv
(
¨gc
, 
¨gv
);

196 c⁄° * 
°yÀ
 = 
	`c⁄fig_gë_°rvÆ
 ("run_mode");

197 i‡(!
°yÀ
 || !
	`°rˇ£cmp
 ("background", style)) {

198 
	`d´m⁄
(1, 1);

199 
backgd_mode
 = 1;

200 
	`BOOT_LOG
 (0, "switchÅo daemon mode");

203 
	}
}

206 
	gD´m⁄
::
	$°›
()

208 i‡(!
backgd_mode
) {

209 
	`¥ötf
("Server stopping...\n");

212 i‡(
ª°¨t_Êag
 && 
¥og_«me
 && 
ßved_¨gv
) {

213 
	`WARN_LOG
("%s", "ServerÑestarting...");

214 
	`chdú
(
cuºít_dú
);

215 
	`execv
(
¥og_«me
, 
ßved_¨gv
);

216 
	`WARN_LOG
("%s", "Restart Failed...");

219 
	`föi_‰ì
();

220 
	}
}

223 
	gD´m⁄
::
	$˛ón_chûd_pids
()

225 
i
;

226 
i
 = 0; i < 
max_li°í_fds
; ++i) {

227 
	`©omic_£t
(&
chûd_pids
[
i
], 0);

229 
	}
}

232 
	gD´m⁄
::
	$kûœŒ_chûdªn
()

234 
i
;

235 
i
 = 0; i < 
g_böds
.
böd_num
; ++i) {

236 i‡(
	`©omic_ªad
(&
chûd_pids
[
i
]) != 0) {

237 
	`kûl
(
	`©omic_ªad
(&
chûd_pids
[
i
]), 
SIGTERM
);

242 
i
 = 0; i < 
g_böds
.
böd_num
; ++i) {

243 i‡(
	`©omic_ªad
(&
chûd_pids
[
i
]) != 0) {

244 
	`u¶ìp
(100);

245 
i
 = 0;

248 
	}
}

251 
	gD´m⁄
::
	$£t_chûd_pid
(
idx
, 
pid
)

253 
	`©omic_£t
(&
chûd_pids
[
idx
], 
pid
);

254 
	}
}

257 
	gD´m⁄
::
	$gë_chûd_pid
(
idx
)

259  
	`©omic_ªad
(&
chûd_pids
[
idx
]);

260 
	}
}

	@daemon.hpp

1 #i‚de‡
ASYNC_SERVER_DAEMON_H_


2 
	#ASYNC_SERVER_DAEMON_H_


	)

4 
	~<°dlib.h
>

7 
	~<libcomm⁄/©omic.h
>

10 
	~"bödög.hµ
"

13 ˛as†
	cD´m⁄
 {

14 
public
:

15 
D´m⁄
();

16 ~
D´m⁄
();

18 
°¨t
(
¨gc
, ** 
¨gv
);

19 
°›
();

21 
£t_¥oc_tôÀ
(c⁄° * 
fmt
, ...);

23 
˛ón_chûd_pids
();

24 
kûœŒ_chûdªn
();

25 
£t_chûd_pid
(
idx
, 
pid
);

26 
gë_chûd_pid
(
idx
);

28 
föi_‰ì
();

29 
¥iv©e
:

30 
öô_sig«l
();

31 
£t_æimô
();

32 
dup_¨gv
(
¨gc
, ** 
¨gv
);

33 
public
:

34 
max_fd_num
;

36 vﬁ©ûê
°›_Êag
;

37 vﬁ©ûê
ª°¨t_Êag
;

38 vﬁ©ûê
ãrm_sig«l
;

39 
°©us
;

40 * 
¥og_«me
;

41 * 
cuºít_dú
;

43 
¥iv©e
:

44 * 
¨gv_begö
;

45 * 
¨gv_íd
;

46 * 
ív_begö
;

48 ** 
ßved_¨gv
;

49 
backgd_mode
;

50 
©omic_t
 
chûd_pids
[
max_li°í_fds
];

53 
D´m⁄
 
g_d´m⁄
;

	@dll.cpp

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

3 
	~<dlf˙.h
>

6 
	~<libcomm⁄/log.h
>

8 
	~"dŒ.hµ
"

10 
DŒI¡îÁ˚
 
g_dŒ
;

12 
	#DLFUNC_NO_ERROR
(
h
, 
v
, 
«me
) \

14 
v
 = (
	`ty≥of
(v))
	`dlsym
(
h
, 
«me
); \

15 
	`dÀº‹
(); \

16 } 0)

	)

18 
	#DLFUNC
(
h
, 
v
, 
«me
) \

20 
v
 = (
	`ty≥of
(v))
	`dlsym
(
h
, 
«me
); \

21 i‡((
îr‹
 = 
	`dÀº‹
 ()Ë!
NULL
) { \

22 
	`ERROR_LOG
("dlsymÉº‹, %s", 
îr‹
); \

23 
	`dl˛o£
(
h
); \

24 
h
 = 
NULL
; \

25 
out
; \

27 } 0)

	)

29 
	gDŒI¡îÁ˚
::
	$DŒI¡îÁ˚
()

31 
h™dÀ
 = 0;

32 
öô_£rvi˚
 = 0;

33 
föi_£rvi˚
 = 0;

34 
¥oc_evíts
 = 0;

35 
¥oc_mˇ°_pkg
 = 0;

36 
¥oc_udp_pkg
 = 0;

38 
gë_pkg_Àn
 = 0;

39 
¥oc_pkg_‰om_˛õ¡
 = 0;

40 
¥oc_pkg_‰om_£rv
 = 0;

41 
⁄_˛õ¡_c⁄n_˛o£d
 = 0;

42 
⁄_fd_˛o£d
 = 0;

43 
	}
}

46 
	gDŒI¡îÁ˚
::
	$ªgi°î_∂ugö
(c⁄° * 
fûe_«me
, 
Êag
)

48 * 
îr‹
;

49 
ªt_code
 = -1;

51 
h™dÀ
 = 
	`dl›í
(
fûe_«me
, 
RTLD_NOW
);

52 i‡((
îr‹
 = 
	`dÀº‹
()Ë!
NULL
) {

53 
	`ERROR_LOG
("dl›íÉº‹, %s", 
îr‹
);

54 
out
;

57 
	`DLFUNC_NO_ERROR
(
h™dÀ
, 
öô_£rvi˚
, "init_service");

58 
	`DLFUNC_NO_ERROR
(
h™dÀ
, 
föi_£rvi˚
, "fini_service");

59 
	`DLFUNC_NO_ERROR
(
h™dÀ
, 
¥oc_evíts
, "proc_events");

60 
	`DLFUNC_NO_ERROR
(
h™dÀ
, 
¥oc_mˇ°_pkg
, "proc_mcast_pkg");

61 
	`DLFUNC_NO_ERROR
(
h™dÀ
, 
¥oc_udp_pkg
, "proc_udp_pkg");

63 
	`DLFUNC
(
h™dÀ
, 
gë_pkg_Àn
, "get_pkg_len");

64 
	`DLFUNC
(
h™dÀ
, 
¥oc_pkg_‰om_˛õ¡
, "proc_pkg_from_client");

65 
	`DLFUNC
(
h™dÀ
, 
¥oc_pkg_‰om_£rv
, "proc_pkg_from_serv");

66 
	`DLFUNC
(
h™dÀ
, 
⁄_˛õ¡_c⁄n_˛o£d
, "on_client_conn_closed");

67 
	`DLFUNC
(
h™dÀ
, 
⁄_fd_˛o£d
, "on_fd_closed");

73 
ªt_code
 = 0;

75 
out
:

76 i‡(!
Êag
) {

77 
	`BOOT_LOG
(
ªt_code
, "dl›í %s", 
fûe_«me
);

79 
	`DEBUG_LOG
("RELOAD %s\t[%s]", 
fûe_«me
, (
ªt_code
 ? "FAIL" : "OK"));

80  
ªt_code
;

82 
	}
}

85 
	gDŒI¡îÁ˚
::
	$uƒegi°î_∂ugö
()

87 i‡(
h™dÀ
 !
NULL
){

88 
	`dl˛o£
(
h™dÀ
);

89 
h™dÀ
 = 
NULL
;

91 
	}
}

	@dll.hpp

12 #i‚de‡
ASYNC_SERVER_DLL_H_


13 
	#ASYNC_SERVER_DLL_H_


	)

15 
	~<sys/ty≥s.h
>

16 
	~"w‹kî.hµ
"

22 ˛as†
	cDŒI¡îÁ˚
 {

23 
	mpublic
:

25 (*
¥oc_pkg_‰om_˛õ¡
)(* 
pkg
, 
pkgÀn
, 
fd£ssi⁄_t
* 
fd£ss
);

26 (*
¥oc_pkg_‰om_£rv
)(
fd
, * 
pkg
, 
pkgÀn
);

27 (*
¥oc_mˇ°_pkg
)(c⁄° * 
d©a
, 
Àn
);

28 (*
⁄_˛õ¡_c⁄n_˛o£d
)(
fd
);

29 (*
⁄_fd_˛o£d
)(
fd
);

30 (*
¥oc_evíts
)();

33 (*
öô_£rvi˚
)(
i•¨ít
);

34 (*
föi_£rvi˚
)(
i•¨ít
);

35 (*
gë_pkg_Àn
)(
fd
, c⁄° * 
avaû_d©a
, 
avaû_Àn
, 
i•¨ít
);

36 (*
¥oc_udp_pkg
)(
fd
, c⁄° * 
avaû_d©a
, 
avaû_Àn
 ,
sockaddr_ö
 * 
‰om
, 
sockÀn_t
 
‰omÀn
 );

37 
public
:

38 
	`DŒI¡îÁ˚
();

39 
	`ªgi°î_∂ugö
(c⁄° * 
fûe_«me
, 
Êag
);

40 
	`uƒegi°î_∂ugö
();

41 
¥iv©e
:

42 * 
h™dÀ
;

45 
DŒI¡îÁ˚
 
g_dŒ
;

	@main.cpp

1 
	~<uni°d.h
>

2 
	~<°rög.h
>

3 
	~<°dlib.h
>

4 
	~<°dio.h
>

5 
	~<time.h
>

6 
	~<sig«l.h
>

9 
	~<libcomm⁄/log.h
>

10 
	~<libcomm⁄/c⁄f_∑r£r/c⁄fig.h
>

11 
	~<libcomm⁄/tm_dúty/tm_dúty.h
>

14 
	~"bödög.hµ
"

15 
	~"d´m⁄.hµ
"

16 
	~"dŒ.hµ
"

17 
	~"sockë.hµ
"

18 
	~"w‹kî.hµ
"

19 
	~"utû.hµ
"

20 
	~"mˇ°.hµ
"

22 
	#DEF_PAGE_SIZE
 8192

	)

23 c⁄° 
vîsi⁄
[] = "1.6.3";

25 
	$show_b™√r
()

27 
„©uª
[256];

28 
pos
 = 0;

30 #ifde‡
DEBUG


31 
pos
 = 
	`•rötf
 (
„©uª
 +Öos, "-DDEBUG -g ");

33 
pos
 = 
	`•rötf
 (
„©uª
 +Öos, "-DEPOLL_MODE ");

35 
	`INFO_LOG
("Asyn¯Sîvî v%s", 
vîsi⁄
);

36 
	`INFO_LOG
("Compûedáà%†%s, fœg: %s\n", 
__DATE__
, 
__TIME__
, 
pos
 ? 
„©uª
 : "");

37 
	}
}

39 
ölöe
 

40 
	$show_ußge
()

42 
	`INFO_LOG
("Ußge: %†c⁄f\n", 
g_d´m⁄
.
¥og_«me
);

43 
	`exô
(-1);

44 
	}
}

46 
ölöe
 

47 
	$∑r£_¨gs
(
¨gc
, ** 
¨gv
)

49 
g_d´m⁄
.
¥og_«me
 = 
	`°rdup
(
¨gv
[0]);

50 
g_d´m⁄
.
cuºít_dú
 = 
	`gë_cuºít_dú_«me
();

51 
	`show_b™√r
();

52 i‡–(
¨gc
 < 2Ë|| !
	`°rcmp
(
¨gv
[1], "--help") || !strcmp(argv[1], "-h") ) {

53 
	`show_ußge
();

55 
	}
}

57 
	$maö
(
¨gc
, * 
¨gv
[])

59 
	`∑r£_¨gs
(
¨gc
, 
¨gv
);

60 *
p_c⁄f_fûe
=
¨gv
[1];

62 i‡(
	`c⁄fig_öô
(
p_c⁄f_fûe
 ) == -1) {

63 
	`BOOT_LOG
(-1, "FaûedÅÿP¨£ Fûê'%s'", 
¨gv
[1]);

66 
g_d´m⁄
.
	`°¨t
(
¨gc
, 
¨gv
);

68 
g_böds
.
	`lﬂd_böd_fûe
(
	`c⁄fig_gë_°rvÆ
("bind_conf"));

71 
	`öô_logfûe
();

72 
sockë_timeout
 = 
	`c⁄fig_gë_ötvÆ
("cli_socket_timeout", 0);

73 
∑ge_size
 = 
	`c⁄fig_gë_ötvÆ
("incoming_packet_max_size", -1);

74 
g_£nd_buf_limô_size
 = 
	`c⁄fig_gë_ötvÆ
("send_buf_limit_size", 0);

75 i‡(
∑ge_size
 <= 0) {

76 
∑ge_size
 = 
DEF_PAGE_SIZE
;

81 
g_dŒ
.
	`ªgi°î_∂ugö
(
	`c⁄fig_gë_°rvÆ
("dll_file"), 0);

83 
g_sock_c⁄n
.
	`öô
(
g_d´m⁄
.
max_fd_num
, g_daemon.max_fd_num);

84 i‡(
g_dŒ
.
öô_£rvi˚
 && (g_dŒ.
	`öô_£rvi˚
(1) != 0)) {

85 
	`BOOT_LOG
(-1, "FAILED TO INIT PARENT PROCESS");

88 
g_d´m⁄
.
	`˛ón_chûd_pids
();

90 
i
;

91 
pid_t
 
pid
;

92  
i
 = 0; i !
g_böds
.
böd_num
; ++i ) {

93 
BödEÀm
* 
bc_ñem
 = &(
g_böds
.
c⁄figs
[
i
]);

94 
bc_ñem
->
	`öô_shmq
();

96 i‡–(
pid
 = 
	`f‹k
 ()) < 0 ) {

97 
	`BOOT_LOG
(-1, "fork childÖrocess");

98 } i‡(
pid
 > 0) {

99 
bc_ñem
->
	`˛o£_shmq
(
em_∑ª¡_ty≥
);

100 
	`ERROR_LOG
("maö:dÿadd c⁄n[%d]",
bc_ñem
->
£ndq
.
	`gë_pùe_h™dÀ
(0));

101 
bc_ñem
->
	`add_pùe_c⁄n
(
em_£nd_pùe
);

102 
bc_ñem
->
	`add_li°í_c⁄n
();

103 
g_d´m⁄
.
	`£t_chûd_pid
(
i
,
pid
);

107 
g_w‹k_svr
.
	`run_chûd_¥o˚ss
(
i
, i + 1);

111 i‡(
	`c⁄fig_gë_°rvÆ
("addr_mcast_ip")) {

112 i‡(
g_mˇ°
.
	`¸óã_addr_mˇ°_sockë
() != 0) {

113 
	`BOOT_LOG
(-1, "PARENT: FAILED TO CREATE MCAST FOR RELOADING SO");

116 
°›_cou¡
 = 0;

118 i‡(
	`u∆ikñy
(
g_d´m⁄
.
°›_Êag
 =1 && g_d´m⁄.
ãrm_sig«l
 =1 && 
°›_cou¡
++ == 0))

119 
	`DEBUG_LOG
("SIG_TERM fromÖid=%d", 
	`gëpid
());

120 i‡(
	`u∆ikñy
(
g_d´m⁄
.
°›_Êag
 =1 && 
g_dŒ
.
föi_£rvi˚
 && (g_dŒ.
	`föi_£rvi˚
(1) == 0)))

123 
g_sock_c⁄n
.
	`√t_lo›
(-1, 
∑ge_size
, 1);

126 
g_d´m⁄
.
	`kûœŒ_chûdªn
();

128 
g_sock_c⁄n
.
	`exô
();

129 
g_dŒ
.
	`uƒegi°î_∂ugö
();

130 
g_böds
.
	`de°roy_Æl_shmq
();

131 
g_d´m⁄
.
	`°›
();

134 
	}
}

	@mcast.cpp

1 
	~<î∫o.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

5 
	~<√t/if.h
>

6 
	~<¨∑/öë.h
>

8 
	~<glib.h
>

11 
	~<libcomm⁄/log.h
>

12 
	~<libcomm⁄/time/time.h
>

13 
	~<libcomm⁄/c⁄f_∑r£r/c⁄fig.h
>

14 
	~<libcomm⁄/öë/mˇ°.h
>

15 
	~<libcomm⁄/øndom/øndom.h
>

17 
	~"dŒ.hµ
"

18 
	~"√t_if.hµ
"

19 
	~"sockë.hµ
"

20 
	~"utû.hµ
"

22 
	~"mˇ°.hµ
"

24 
Mˇ°
 
g_mˇ°
;

26 
gboﬁón
 
	$addr_¥ed
(
gpoöãr
 
key
, gpoöã∏
vÆue
, gpoöã∏
u£r_d©a
)

28 * 
n
 = (*)
u£r_d©a
;

29 i‡(*
n
 == 0) {

30  
TRUE
;

32 (*
n
)--;

33  
FALSE
;

35 
	}
}

37 
gboﬁón
 
	$dñ_™_expúed_addr
(
gpoöãr
 
key
, gpoöã∏
vÆue
, gpoöã∏
u£r_d©a
)

39 
addr_node_t
* 
n
 = (addr_node_t*)
vÆue
;

40 i‡–(
	`gë_now_tv
()->
tv_£c
 - 
n
->
œ°_syn_tm
) > 100 ) {

45 
	`INFO_LOG
("DEL AN ADDR\t[id=%u ip=%sÖort=%dÜast_tm=%ld]",

46 
n
->
svr_id
,Ç->
ù
,Ç->
p‹t
,Ç->
œ°_syn_tm
);

47  
TRUE
;

49  
FALSE
;

50 
	}
}

52 
	$do_dñ_expúed_addrs
(
gpoöãr
 
key
, gpoöã∏
vÆue
, gpoöã∏
u£r_d©a
)

54 
addr_ˇche_t
* 
ac
 = (addr_ˇche_t*)
vÆue
;

55 
	`g_hash_èbÀ_f‹óch_ªmove
(
ac
->
addr_tbl
, 
dñ_™_expúed_addr
,ác->
svr_«me
);

56 
	}
}

58 
	$‰ì_addr_ˇche
(* 
addr_ˇche
)

60 
addr_ˇche_t
* 
addr_c
 = (addr_ˇche_t*)
addr_ˇche
;

61 
	`g_hash_èbÀ_de°roy
(
addr_c
->
addr_tbl
);

62 
	`g_¶i˚_‰ì1
((*
addr_c
),áddr_c);

63 
	}
}

65 
	$‰ì_addr_node
(* 
addr_node
)

67 
	`g_¶i˚_‰ì1
((
addr_node_t
), 
addr_node
);

68 
	}
}

71 
	gMˇ°
::
	$Mˇ°
()

73 
√xt_syn_addr_tm
 = 0x7FFFFFFF;

74 
√xt_dñ_addrs_tm
 = 0x7FFFFFFF;

76 
addr_mˇ°_fd
 = -1;

77 
mˇ°_fd
 = -1;

78 
	}
}

80 
	gMˇ°
::~
	$Mˇ°
()

83 
	}
}

86 
Mˇ°
::
	$¸óã_addr_mˇ°_sockë
()

88 
	`§™d
(
	`time
(0));

90 
√xt_dñ_addrs_tm
 = 
	`gë_now_tv
()->
tv_£c
 + 100;

91 
svr_tbl
 = 
	`g_hash_èbÀ_√w_fuŒ
(
g_°r_hash
, 
g_°r_equÆ
, 0, 
‰ì_addr_ˇche
);

93 
addr_mˇ°_fd
 = 
	`¸óã_mˇ°_sockë
(
	`c⁄fig_gë_°rvÆ
("addr_mcast_ip"),

94 
	`c⁄fig_gë_°rvÆ
("addr_mcast_port"),

95 
	`c⁄fig_gë_°rvÆ
("addr_mcast_incoming_if"),

96 
mˇ°_rdwr
, &
addr_mˇ°_addr
, &
addr_mˇ°_Àn
);

97 i‡(
addr_mˇ°_fd
 == -1) {

98 
	`ERROR_LOG
("FaûedÅÿCª©ê`addr_mˇ°_fd`:Éº=%d %s", 
î∫o
, 
	`°ªº‹
(errno));

102 i‡(!
is_∑ª¡
) {

103 
mˇ°_pkg_hódî_t
* 
hdr
 = (mˇ°_pkg_hódî_t*)
addr_buf
;

104 
addr_mˇ°_pkg_t
* 
pkg
 = (addr_mˇ°_pkg_t*)
hdr
->
body
;

106 
hdr
->
¥Ÿo_ty≥
 = 
mˇ°_nŸify_addr
;

107 
pkg
->
svr_id
 = 
	`gë_£rvî_id
();

108 
	`°r˝y
(
pkg
->
«me
, 
	`gë_£rvî_«me
());

109 
	`°r˝y
(
pkg
->
ù
, 
	`gë_£rvî_ù
());

110 
pkg
->
p‹t
 = 
	`gë_£rvî_p‹t
();

113  
g_sock_c⁄n
.
	`add_⁄e_c⁄n
(
addr_mˇ°_fd
, 
em_fd_ty≥_addr_mˇ°
, (
sockaddr_ö
*)&
addr_mˇ°_addr
, 0);

114 
	}
}

117 
	gMˇ°
::
	$syn_addr_öfo
()

119 
time_t
 
now_£c
 = 
	`gë_now_tv
()->
tv_£c
;

121 i‡(
now_£c
 > 
√xt_syn_addr_tm
) {

122 
	`£nd_addr_mˇ°_pkg
(
addr_mˇ°_syn_pkg
);

125 i‡(
now_£c
 > 
√xt_dñ_addrs_tm
) {

126 
	`dñ_expúed_addrs
();

128 
	}
}

131 
	gMˇ°
::
	$asynsvr_¸óã_mˇ°_sockë
()

133 
mˇ°_fd
 = 
	`¸óã_mˇ°_sockë
(
	`c⁄fig_gë_°rvÆ
("mcast_ip"),

134 
	`c⁄fig_gë_°rvÆ
("mcast_port"),

135 
	`c⁄fig_gë_°rvÆ
("mcast_incoming_if"),

136 
mˇ°_rdwr
, &
mˇ°_addr
, &
mˇ°_Àn
);

137 i‡(
mˇ°_fd
 == -1) {

138 
	`ERROR_LOG
("FaûedÅÿCª©ê`mˇ°_fd`:Éº=%d %s", 
î∫o
, 
	`°ªº‹
(errno));

142  
g_sock_c⁄n
.
	`add_⁄e_c⁄n
(
mˇ°_fd
, 
em_fd_ty≥_mˇ°
, (
sockaddr_ö
*)&
mˇ°_addr
, 0);

143 
	}
}

146 
	gMˇ°
::
	$£nd_addr_mˇ°_pkg
(
uöt32_t
 
pkg_ty≥
)

148 
mˇ°_pkg_hódî_t
* 
hdr
 = (mˇ°_pkg_hódî_t*)
addr_buf
;

150 
hdr
->
pkg_ty≥
 =Ökg_type;

151 
	`£ndto
(
addr_mˇ°_fd
, 
addr_buf
, ◊ddr_buf), 0, (
sockaddr
*)&
addr_mˇ°_addr
, 
addr_mˇ°_Àn
);

152 
√xt_syn_addr_tm
 = 
	`time
(0Ë+ 
	`ønged_øndom
(25, 48);

153 
	}
}

156 
	gMˇ°
::
	$£nd_mˇ°_pkg
(c⁄° * 
d©a
, 
Àn
)

158  
	`£ndto
(
mˇ°_fd
, 
d©a
, 
Àn
, 0, (
sockaddr
*)&
mˇ°_addr
, 
mˇ°_Àn
);

159 
	}
}

162 
	gMˇ°
::
	$async£rv_¥oc_mˇ°_pkg
(* 
d©a
, 
Àn
)

164 i‡(
Àn
 < ()(
mˇ°_pkg_hódî_t
)) {

165 
	`ERROR_LOG
("övÆidÖkgÜí: %d", 
Àn
);

169 
mˇ°_pkg_hódî_t
* 
pkg
 = (mˇ°_pkg_hódî_t*)
d©a
;

170 
pkg
->
¥Ÿo_ty≥
) {

171 
mˇ°_nŸify_addr
:

172 i‡(!
is_∑ª¡
){

173 
	`¥oc_addr_mˇ°_pkg
((
mˇ°_pkg_hódî_t
*)
d©a
, 
Àn
);

176 
mˇ°_ªlﬂd_ãxt
:

177 
	`¥oc_ªlﬂd_∂ugö
((
ªlﬂd_ãxt_pkg_t
*)
pkg
->
body
, 
Àn
 - (
mˇ°_pkg_hódî_t
));

182 
	}
}

184 
addr_node_t
*

185 
	gMˇ°
::
	$gë_£rvi˚_ùp‹t
(c⁄° * 
£rvi˚
, 
svr_id
)

187 
addr_ˇche_t
* 
ac
 = (addr_ˇche_t*)
	`g_hash_èbÀ_lookup
(
svr_tbl
, 
£rvi˚
);

188 i‡(
ac
 && 
	`g_hash_èbÀ_size
◊c->
addr_tbl
)) {

189 i‡(
svr_id
) {

190  (
addr_node_t
*)
	`g_hash_èbÀ_lookup
(
ac
->
addr_tbl
, &
svr_id
);

192 
n
 = 
	`ønd
(Ë% 
	`g_hash_èbÀ_size
(
ac
->
addr_tbl
);

193  (
addr_node_t
*)
	`g_hash_èbÀ_föd
(
ac
->
addr_tbl
, 
addr_¥ed
, &
n
);

198 
	}
}

201 
	gMˇ°
::
	$dñ_expúed_addrs
()

203 
	`g_hash_èbÀ_f‹óch
(
svr_tbl
, 
do_dñ_expúed_addrs
, 0);

204 
√xt_dñ_addrs_tm
 = 
	`gë_now_tv
()->
tv_£c
 + 100;

205 
	}
}

210 
	gMˇ°
::
	$¥oc_addr_mˇ°_pkg
(c⁄° 
mˇ°_pkg_hódî_t
* 
hdr
, 
Àn
)

212 i‡(
Àn
 !((
addr_mˇ°_pkg_t
Ë+ (
mˇ°_pkg_hódî_t
))) {

213 
	`ERROR_LOG
("invalidÖkgÜen: %d,ÉxpectedÜen: %lu",

214 
Àn
, ()((
addr_mˇ°_pkg_t
Ë+ (
mˇ°_pkg_hódî_t
)));

218 c⁄° 
addr_mˇ°_pkg_t
* 
pkg
 = (addr_mˇ°_pkg_t*)
hdr
->
body
;

220 i‡–(
	`°rcmp
(
pkg
->
«me
, 
	`gë_£rvî_«me
()) == 0)

221 && (
pkg
->
svr_id
 =
	`gë_£rvî_id
()) ) {

229 
√w_node
 = 0;

230 
addr_ˇche_t
* 
ac
 = (addr_ˇche_t*)
	`g_hash_èbÀ_lookup
(
svr_tbl
, 
pkg
->
«me
);

231 i‡(!
ac
) {

232 
ac
 = (
addr_ˇche_t
*)
	`g_¶i˚_Æloc
((*ac));

233 
	`°r˝y
(
ac
->
svr_«me
, 
pkg
->
«me
);

234 
ac
->
addr_tbl
 = 
	`g_hash_èbÀ_√w_fuŒ
(
g_öt_hash
, 
g_öt_equÆ
, 0, 
‰ì_addr_node
);

235 
	`g_hash_èbÀ_ö£π
(
svr_tbl
, 
ac
->
svr_«me
,ác);

238 
addr_node_t
* 
addr_node
 = (addr_node_t*)
	`g_hash_èbÀ_lookup
(
ac
->
addr_tbl
, &(
pkg
->
svr_id
));

239 i‡(!
addr_node
) {

240 
addr_node
 = (
addr_node_t
*)
	`g_¶i˚_Æloc
((*addr_node));

241 
addr_node
->
svr_id
 = 
pkg
->svr_id;

242 
	`g_hash_èbÀ_ö£π
(
ac
->
addr_tbl
, &(
addr_node
->
svr_id
),áddr_node);

243 
√w_node
 = 1;

245 
	`INFO_LOG
("ADD AN ADDR\t[name=%s id=%u ip=%sÖort=%d]",

246 
pkg
->
«me
,Ökg->
svr_id
,Ökg->
ù
,Ökg->
p‹t
);

248 i‡–!
√w_node


249 && ((
	`°∫cmp
(
addr_node
->
ù
, 
pkg
->ip, (addr_node->ip)) != 0)

250 || (
addr_node
->
p‹t
 !
pkg
->port))) {

251 
buf
[100];

252 
	`¢¥ötf
(
buf
, (buf), "%s.%s", 
pkg
->
«me
, "conflict");

255 
	`EMERG_LOG
("PROBABLY A SERVICE NAME CONFLICT\[name=%s id=%u %s:%u %s:%u]",

256 
pkg
->
«me
,Ökg->
svr_id
,Ökg->
ù
,Ökg->
p‹t
,

257 
addr_node
->
ù
,áddr_node->
p‹t
);

259 
	`°r˝y
(
addr_node
->
ù
, 
pkg
->ip);

260 
addr_node
->
p‹t
 = 
pkg
->port;

261 
addr_node
->
œ°_syn_tm
 = 
	`gë_now_tv
()->
tv_£c
;

263 i‡(
hdr
->
pkg_ty≥
 =
addr_mˇ°_1°_pkg
) {

264 
	`£nd_addr_mˇ°_pkg
(
addr_mˇ°_syn_pkg
);

266 
	}
}

269 
	gMˇ°
::
	$¥oc_ªlﬂd_∂ugö
(
ªlﬂd_ãxt_pkg_t
* 
pkg
, 
Àn
)

271 i‡(
Àn
 !(
ªlﬂd_ãxt_pkg_t
)) {

272 
	`ERROR_LOG
("invalidÜen: %d,ÉxpectedÜen: %lu",

273 
Àn
, ()(
ªlﬂd_ãxt_pkg_t
));

277 i‡(!
is_∑ª¡
) {

278 i‡–
	`°rcmp
(
pkg
->
svr_«me
, 
	`gë_£rvî_«me
())

279 || (
pkg
->
svr_id
 && (pkg->svr_id !
	`gë_£rvî_id
())) ) {

284 i‡–(
g_böds
.
böd_num
 == 0)

285 || 
	`°rcmp
(
pkg
->
svr_«me
, 
g_böds
.
c⁄figs
[0].
£rvî_«me
)

286 || (
pkg
->
svr_id
 != 0) ) {

291 
pkg
->
√w_so_«me
[(pkg->new_so_name) - 1] = '\0';

296 
g_dŒ
.
	`uƒegi°î_∂ugö
();

298 
	`DEBUG_LOG
("RELOAD %s", 
pkg
->
√w_so_«me
);

300 i‡(
g_dŒ
.
	`ªgi°î_∂ugö
(
pkg
->
√w_so_«me
, 1) == -1) {

301 
	`exô
(-1);

307 
	}
}

	@mcast.hpp

12 #i‚de‡
ASYNC_SERVER_MCAST_H_


13 
	#ASYNC_SERVER_MCAST_H_


	)

15 
	~<time.h
>

17 
	~<glib/ghash.h
>

21 
mˇ°_nŸify_addr
 = 0,

22 
mˇ°_ªlﬂd_ãxt
 = 1

26 
	maddr_mˇ°_1°_pkg
 = 1,

27 
	maddr_mˇ°_syn_pkg
 = 2

30 
	saddr_node_t
 {

31 
uöt32_t
 
	msvr_id
;

32 
	mù
[16];

33 
uöt16_t
 
	mp‹t
;

34 
time_t
 
	mœ°_syn_tm
;

37 
	saddr_ˇche_t
 {

38 
	msvr_«me
[16];

39 
GHashTabÀ
* 
	maddr_tbl
;

43 #¥agm®
∑ck
(1)

44 
	smˇ°_pkg_hódî_t
 {

45 
uöt16_t
 
	mpkg_ty≥
;

46 
uöt16_t
 
	m¥Ÿo_ty≥
;

47 
	mbody
[];

50 
	saddr_mˇ°_pkg_t
 {

51 
uöt32_t
 
	msvr_id
;

52 
	m«me
[16];

53 
	mù
[16];

54 
uöt16_t
 
	mp‹t
;

57 
	sªlﬂd_ãxt_pkg_t
 {

58 
	msvr_«me
[16];

59 
uöt32_t
 
	msvr_id
;

60 
	m√w_so_«me
[32];

62 #¥agm®
∑ck
()

64 ˛as†
	cMˇ°
 {

65 
	mpublic
:

66 
Mˇ°
();

67 ~
Mˇ°
();

69 
¸óã_addr_mˇ°_sockë
();

70 
asynsvr_¸óã_mˇ°_sockë
();

71 
£nd_addr_mˇ°_pkg
(
uöt32_t
 
pkg_ty≥
);

72 
£nd_mˇ°_pkg
(c⁄° * 
d©a
, 
Àn
);

73 
addr_node_t
* 
gë_£rvi˚_ùp‹t
(c⁄° * 
£rvi˚
, 
svr_id
);

75 
syn_addr_öfo
();

76 
async£rv_¥oc_mˇ°_pkg
(* 
d©a
, 
Àn
);

78 
	m¥iv©e
:

79 
dñ_expúed_addrs
();

80 
¥oc_addr_mˇ°_pkg
(c⁄° 
mˇ°_pkg_hódî_t
* 
hdr
, 
Àn
);

81 
¥oc_ªlﬂd_∂ugö
(
ªlﬂd_ãxt_pkg_t
* 
pkg
, 
Àn
);

83 
	m¥iv©e
:

84 
time_t
 
√xt_syn_addr_tm
;

85 
time_t
 
	m√xt_dñ_addrs_tm
;

87 
GHashTabÀ
* 
	msvr_tbl
;

88 
	maddr_buf
[(
mˇ°_pkg_hódî_t
Ë+ (
addr_mˇ°_pkg_t
)];

91 
	maddr_mˇ°_fd
;

92 
sockaddr_°‹age
 
	maddr_mˇ°_addr
;

93 
sockÀn_t
 
	maddr_mˇ°_Àn
;

96 
	mmˇ°_fd
;

97 
sockaddr_°‹age
 
	mmˇ°_addr
;

98 
sockÀn_t
 
	mmˇ°_Àn
;

101 
Mˇ°
 
g_mˇ°
;

	@net_if.cpp

1 
	~<as£π.h
>

2 
	~<î∫o.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

6 
	~<¨∑/öë.h
>

7 
	~<sys/sockë.h
>

10 
	~<libcomm⁄/log.h
>

11 
	~<libcomm⁄/time/time.h
>

12 
	~<libcomm⁄/öë/t˝.h
>

14 
	~"√t_if.hµ
"

15 
	~"mˇ°.hµ
"

16 
	~"sockë.hµ
"

17 
	~"dŒ.hµ
"

20 
time_t
 
sockë_timeout
;

21 
	g∑ge_size
;

22 
uöt32_t
 
	gg_£nd_buf_limô_size
;

23 
	gg_ù_ªsﬁved
;

24 
ù_p‹t_t
 
	gg_ù_p‹t
;

26 
	$c⁄√˘_to_svr
(c⁄° * 
ùaddr
, 
ö_addr_t
 
p‹t
, 
bufsz
, 
timeout
)

28 
sockaddr_ö
 
≥î
;

29 
fd
;

31 
	`mem£t
(&
≥î
, 0, (peer));

32 
≥î
.
sö_Ámûy
 = 
AF_INET
;

33 
≥î
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

34 i‡(
	`öë_±⁄
(
AF_INET
, 
ùaddr
, &
≥î
.
sö_addr
) <= 0) {

35 
	`ERROR_RETURN
(("öë_±⁄ %†Áûed, %m", 
ùaddr
), -1);

38 
fd
 = 
	`ß„_t˝_c⁄√˘
(
ùaddr
, 
p‹t
, 
timeout
, 1);

39 i‡(
fd
 != -1) {

40 
	`DEBUG_LOG
("CONNECTED TO\t[%s:%u fd=%d]", 
ùaddr
, 
p‹t
, 
fd
);

41 
g_sock_c⁄n
.
	`add_⁄e_c⁄n
(
fd
, 
em_fd_ty≥_ªmŸe
, &
≥î
, 0);

43 
	`ERROR_LOG
("ÁûedÅÿc⁄√˘Åÿ%s:%u,Éº=%d %s", 
ùaddr
, 
p‹t
, 
î∫o
, 
	`°ªº‹
(errno));

46  
fd
;

47 
	}
}

49 
	$c⁄√˘_to_£rvi˚
(c⁄° * 
£rvi˚_«me
, 
uöt32_t
 
svr_id
, 
bufsz
, 
timeout
)

51 
	`INFO_LOG
("TRY CONNECTING TO\t[«me=%†id=%u]", 
£rvi˚_«me
, 
svr_id
);

53 
addr_node_t
* 
n
 = 
g_mˇ°
.
	`gë_£rvi˚_ùp‹t
(
£rvi˚_«me
, 
svr_id
);

54 i‡(
n
) {

55 
	`INFO_LOG
("SERVICE RESOLVED\t[name=%s id=%u %u ip=%sÖort=%d]",

56 
£rvi˚_«me
, 
svr_id
, 
n
->svr_id,Ç->
ù
,Ç->
p‹t
);

57 
fd
 = 
	`c⁄√˘_to_svr
(
n
->
ù
,Ç->
p‹t
, 
bufsz
, 
timeout
);

58 i‡(
fd
 != -1) {

59 
	`INFO_LOG
("CONNECTED TO\t[%s:%u fd=%d]", 
n
->
ù
,Ç->
p‹t
, 
fd
);

63 
g_ù_ªsﬁved
 = 1;

64 
	`mem˝y
(
g_ù_p‹t
.
ù
, 
n
->ip, (g_ip_port.ip));

65 
g_ù_p‹t
.
p‹t
 = 
n
->port;

67  
fd
;

70 
g_ù_ªsﬁved
 = 0;

71 
	`ERROR_LOG
("nÿ£rvî wôhÅhê«mê[%s]ánd sîvî id [%u] i†found", 
£rvi˚_«me
, 
svr_id
);

73 
	}
}

75 
	$˛o£_svr
(
svrfd
)

77 
g_sock_c⁄n
.
	`dñ_⁄e_c⁄n
(
svrfd
, 2);

78 
	}
}

80 
	$¸óã_udp_sockë
(
sockaddr_ö
* 
addr
, c⁄° * 
ù
, 
ö_p‹t_t
 
p‹t
)

82 
	`mem£t
(
addr
, 0, (*addr));

84 
addr
->
sö_Ámûy
 = 
AF_INET
;

85 
addr
->
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

86 i‡(
	`öë_±⁄
(
AF_INET
, 
ù
, &(
addr
->
sö_addr
)) <= 0 ) {

90  
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

91 
	}
}

93 c⁄° * 
	$ªsﬁve_£rvi˚_«me
(c⁄° * 
£rvi˚_«me
, 
uöt32_t
 
svr_id
)

95 
addr_node_t
* 
n
 = 
g_mˇ°
.
	`gë_£rvi˚_ùp‹t
(
£rvi˚_«me
, 
svr_id
);

96 i‡(
n
) {

97  
n
->
ù
;

101 
	}
}

103 c⁄° 
ù_p‹t_t
* 
	$gë_œ°_c⁄√˘ög_£rvi˚
()

105 i‡(
g_ù_ªsﬁved
) {

106  &
g_ù_p‹t
;

110 
	}
}

112 
	$√t_£nd
(
fd
, c⁄° * 
d©a
, 
uöt32_t
 
Àn
)

114  
g_sock_c⁄n
.
	`£nd_d©a
(
fd
, 
d©a
, 
Àn
);

115 
	}
}

117 
	$£nd_pkg_to_˛õ¡
(
fd£ssi⁄_t
* 
fd£ss
, c⁄° * 
pkg
, c⁄° 
pkgÀn
)

119 
shmq_block_t
 
mb
;

121 
mb
.
id
 = 
fd£ss
->id;

122 
mb
.
fd
 = 
fd£ss
->fd;

123 
mb
.
ty≥
 = 
em_d©a_block
;

125 
£nd_byãs
, 
cur_Àn
;

126 
£nd_byãs
 = 0; síd_byã†< 
pkgÀn
; síd_byã†+
cur_Àn
) {

127 i‡((
pkgÀn
 - 
£nd_byãs
Ë> (
∑ge_size
 - ()(
shmq_block_t
))) {

128 
cur_Àn
 = 
∑ge_size
 - (
shmq_block_t
);

130 
cur_Àn
 = 
pkgÀn
 - 
£nd_byãs
;

133 
mb
.
Àn
 = 
cur_Àn
 + (
shmq_block_t
);

135 i‡(
g_w‹k_svr
.
	`push_block_d©a
(&
mb
, (*)
pkg
+
£nd_byãs
) == -1) {

141 
	}
}

143 
	$˛o£_˛õ¡_c⁄n
(
fd
)

145 
shmq_block_t
 
mb
;

147 
fd£ssi⁄_t
* 
fd£ss
 = 
g_w‹k_svr
.
	`gë_fd£ss
(
fd
);

148 i‡(!
fd£ss
) {

152 
mb
.
id
 = 
fd£ss
->id;

153 
mb
.
Àn
 = (
shmq_block_t
);

154 
mb
.
ty≥
 = 
em_fö_block
;

155 
mb
.
fd
 = fd;

158 
g_dŒ
.
	`⁄_˛õ¡_c⁄n_˛o£d
(
fd
);

159 
g_w‹k_svr
.
	`ªmove_fd£ss
(
fd
);

161 
g_w‹k_svr
.
	`push_block_d©a
(&
mb
, 0);

162 
	}
}

164 
uöt32_t
 
	$gë_ªmŸe_ù
(
fd
)

166  
g_sock_c⁄n
.
	`gë_ªmŸe_ù
(
fd
);

167 
	}
}

169 
uöt32_t
 
	$gë_£rvî_id
()

171  
g_w‹k_svr
.
	`gë_c⁄fig
()->
£rvî_id
;

172 
	}
}

174 c⁄° * 
	$gë_£rvî_«me
()

176  
g_w‹k_svr
.
	`gë_c⁄fig
()->
£rvî_«me
;

177 
	}
}

179 c⁄° * 
	$gë_£rvî_ù
()

181  
g_w‹k_svr
.
	`gë_c⁄fig
()->
böd_ù
;

182 
	}
}

184 
ö_p‹t_t
 
	$gë_£rvî_p‹t
()

186  
g_w‹k_svr
.
	`gë_c⁄fig
()->
böd_p‹t
;

187 
	}
}

189 
uöt32_t
 
	$gë_˛õ¡_ù
(c⁄° 
fd£ssi⁄_t
* 
fd£ss
)

191  
fd£ss
->
ªmŸe_ù
;

192 
	}
}

194 
uöt32_t
 
	$gë_˛õ¡_p‹t
(c⁄° 
fd£ssi⁄_t
* 
fd£ss
)

196  
fd£ss
->
ªmŸe_p‹t
;

197 
	}
}

199 
	$£nd_mˇ°_pkg
(c⁄° * 
d©a
, 
Àn
)

201  
g_mˇ°
.
	`£nd_mˇ°_pkg
(
d©a
, 
Àn
);

202 
	}
}

	@net_if.hpp

12 #i‚de‡
ASYNC_SERVER_NET_INTERFACE_H_


13 
	#ASYNC_SERVER_NET_INTERFACE_H_


	)

15 
	~<°döt.h
>

16 
	~<√töë/ö.h
>

18 
time_t
 
sockë_timeout
;

19 
∑ge_size
;

20 
uöt32_t
 
g_£nd_buf_limô_size
;

24 
	sù_p‹t_t
 {

26 
	mù
[16];

28 
ö_addr_t
 
	mp‹t
;

31 
	sfd£ssi⁄
 {

32 
	mfd
;

33 
uöt32_t
 
	mid
;

34 
uöt16_t
 
	mªmŸe_p‹t
;

35 
uöt32_t
 
	mªmŸe_ù
;

36 } 
	tfd£ssi⁄_t
;

38 
c⁄√˘_to_svr
(c⁄° * 
ùaddr
, 
ö_addr_t
 
p‹t
, 
bufsz
, 
timeout
);

40 
c⁄√˘_to_£rvi˚
(c⁄° * 
£rvi˚_«me
, 
uöt32_t
 
svr_id
, 
bufsz
, 
timeout
);

42 
˛o£_svr
(
svrfd
);

44 
¸óã_udp_sockë
(
sockaddr_ö
* 
addr
, c⁄° * 
ù
, 
ö_p‹t_t
 
p‹t
);

46 c⁄° * 
ªsﬁve_£rvi˚_«me
(c⁄° * 
£rvi˚_«me
, 
uöt32_t
 
svr_id
);

48 c⁄° 
ù_p‹t_t
* 
gë_œ°_c⁄√˘ög_£rvi˚
();

50 
√t_£nd
(
fd
, c⁄° * 
d©a
, 
uöt32_t
 
Àn
);

52 
£nd_pkg_to_˛õ¡
(
fd£ssi⁄_t
* 
fd£ss
, c⁄° * 
pkg
, c⁄° 
pkgÀn
);

54 
˛o£_˛õ¡_c⁄n
(
fd
);

56 
uöt32_t
 
gë_ªmŸe_ù
(
fd
);

58 
uöt32_t
 
gë_£rvî_id
();

60 c⁄° * 
gë_£rvî_«me
();

62 c⁄° * 
gë_£rvî_ù
();

64 
ö_p‹t_t
 
gë_£rvî_p‹t
();

66 
uöt32_t
 
gë_˛õ¡_ù
(c⁄° 
fd£ssi⁄_t
* 
fd£ss
);

68 
uöt32_t
 
gë_˛õ¡_p‹t
(c⁄° 
fd£ssi⁄_t
* 
fd£ss
);

70 
£nd_mˇ°_pkg
(c⁄° * 
d©a
, 
Àn
);

	@sample/client.c

1 
	~<°döt.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<î∫o.h
>

7 
	~<uni°d.h
>

8 
	~<√töë/ö.h
>

9 
	~<¨∑/öë.h
>

10 
	~<sys/sockë.h
>

11 
	~<±hªad.h
>

13 
	~<›ís¶/md5.h
>

15 
	$c⁄√˘_to_svr
(c⁄° * 
ùaddr
, 
uöt16_t
 
p‹t
)

17 
sockaddr_ö
 
≥î
;

18 
fd
;

20 
	`bzîo
(&
≥î
,  (peer));

21 
≥î
.
sö_Ámûy
 = 
AF_INET
;

22 
≥î
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

23 i‡(
	`öë_±⁄
 (
AF_INET
, 
ùaddr
, &
≥î
.
sö_addr
) <= 0) {

27 
sockfd
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 0);

28 
	`c⁄√˘
(
sockfd
, (c⁄° 
sockaddr
 *)&
≥î
, (peer));

30  
sockfd
;

31 
	}
}

33 #¥agm®
∑ck
(1)

34 
	s˛i_¥Ÿo_hód_t
 {

35 
uöt32_t
 
	mÀn
;

36 
uöt32_t
 
	mcmd
;

37 
uöt32_t
 
	mu£r_id
;

38 
uöt32_t
 
	m£q_num
;

39 
uöt32_t
 
	mªt
;

40 
uöt8_t
 
	mbody
[];

42 #¥agm®
∑ck
()

44 *
	$£nd_d©a
(*
¨g
)

47 
	`±hªad_dëach
(
	`±hªad_£lf
());

48 
sockfd
 = *(*)
¨g
;

49 
buf
[8192] = {0};

51 
d©a
[4096] = {};

52 
i
 = 0;

53 ; 
i
 < 4095; i++) {

54 
d©a
[
i
] = 'a' + i % 26;

56 
uöt32_t
 
body_Àn
 = 
	`°æí
(
d©a
);

57 
˛i_¥Ÿo_hód_t
 *
hódî
 = (˛i_¥Ÿo_hód_t*)
	`mÆloc
(20 + 
body_Àn
);

58 
	`mem£t
(
hódî
, 0, 20 + 
body_Àn
);

59 
hódî
->
cmd
 = 101;

60 
hódî
->
u£r_id
 = 10001;

61 
hódî
->
Àn
 = 20 + 
body_Àn
;

62 
	`mem˝y
(
hódî
->
body
, 
d©a
, 
body_Àn
);

64 
	`wrôe
(
sockfd
, 
hódî
, hódî->
Àn
);

66 
	`¥ötf
("Hello World ");

73 
	`‰ì
(
hódî
);

74 
	`u¶ìp
(10000);

77  
NULL
;

78 
	}
}

80 
	$maö
(
¨gc
, **
¨gv
)

82 
sockfd
 = 
	`c⁄√˘_to_svr
("192.168.10.181", 8165);

84 
i
 = 0;

85 
±hªad_t
 
tid
[10000];

87 
	`±hªad_¸óã
(&
tid
[0], 0, 
£nd_d©a
, &
sockfd
);

89 
	`¶ìp
(100);

90 
	`˛o£
(
sockfd
);

91 
	}
}

	@sample/test.cpp

3 
	~<libcomm⁄/li°.h
>

4 
	~<libcomm⁄/log.h
>

7 
	~"ã°.hµ
"

22 #¥agm®
∑ck
(1)

23 
	s˛i_¥Ÿo_hód_t
 {

24 
uöt32_t
 
Àn
;

25 
uöt32_t
 
cmd
;

26 
uöt32_t
 
u£r_id
;

27 
uöt32_t
 
£q_num
;

28 
uöt32_t
 
ªt
;

29 
uöt8_t
 
body
[];

31 #¥agm®
∑ck
()

33 "C" 
	$öô_£rvi˚
(
i•¨ít
)

36 
	`DEBUG_LOG
("INIT...");

37 i‡(!
i•¨ít
) {

42 
	}
}

44 "C" 
	$föi_£rvi˚
(
i•¨ít
)

46 
	`DEBUG_LOG
("FINI...");

48 
	}
}

50 "C" 
	$¥oc_evíts
()

53 
	}
}

55 "C" 
	$gë_pkg_Àn
(
fd
, c⁄° * 
pkg
, 
pkgÀn
, 
i•¨ít
)

57 
Àn
 = -1;

58 i‡(
i•¨ít
) {

68 
˛i_¥Ÿo_hód_t
* 
hódî
 = (˛i_¥Ÿo_hód_t*)
pkg
;

69 
Àn
 = 
hódî
->len;

71 
Àn
 = *(
uöt32_t
*)(
pkg
);

74 
	`DEBUG_LOG
("gëÖkgÜí=[Àn=%d fd=%d]",
Àn
,
fd
);

75  
Àn
;

76 
	}
}

78 "C" 
	$¥oc_pkg_‰om_˛õ¡
(* 
d©a
, 
Àn
, 
fd£ssi⁄_t
* 
fd£ss
)

80 
˛i_¥Ÿo_hód_t
* 
hódî
 = (˛i_¥Ÿo_hód_t*)
d©a
;

81 
	`DEBUG_LOG
("pkg†Àn=[%d]",
Àn
);

82 
	`DEBUG_LOG
("%.*s", 
Àn
-(
˛i_¥Ÿo_hód_t
), (*)
hódî
->
body
);

85 
	`£nd_pkg_to_˛õ¡
(
fd£ss
, 
d©a
, 
Àn
);

89 
	}
}

91 "C" 
	$¥oc_pkg_‰om_£rv
(
fd
, * 
d©a
, 
Àn
)

93 
	}
}

95 "C" 
	$⁄_˛õ¡_c⁄n_˛o£d
(
fd
)

97 
	}
}

99 "C" 
	$⁄_fd_˛o£d
(
fd
)

101 
	}
}

	@sample/test.hpp

1 #i‚de‡
_SERVICE_H_


2 
	#_SERVICE_H_


	)

4 
	~<asyn_£rv/√t_if.hµ
>

21 
	s˛i_¥Ÿo_hód_t
 {

22 
uöt32_t
 
	mÀn
;

23 
uöt32_t
 
	mcmd
;

24 
uöt32_t
 
	mu£r_id
;

25 
uöt32_t
 
	m£q_num
;

26 
uöt32_t
 
	mªt
;

27 
uöt8_t
 
	mbody
[];

	@sample_protobuf/client.c

1 
	~<°döt.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<î∫o.h
>

7 
	~<uni°d.h
>

8 
	~<√töë/ö.h
>

9 
	~<¨∑/öë.h
>

10 
	~<sys/sockë.h
>

11 
	~"ã°.pb.h
"

13 
	~<°rög
>

15 
	~<›ís¶/md5.h
>

17 
	$c⁄√˘_to_svr
(c⁄° * 
ùaddr
, 
uöt16_t
 
p‹t
)

19 
sockaddr_ö
 
≥î
;

20 
fd
;

22 
	`bzîo
(&
≥î
,  (peer));

23 
≥î
.
sö_Ámûy
 = 
AF_INET
;

24 
≥î
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

25 i‡(
	`öë_±⁄
 (
AF_INET
, 
ùaddr
, &
≥î
.
sö_addr
) <= 0) {

29 
sockfd
 = 
	`sockë
(
PF_INET
, 
SOCK_STREAM
, 0);

30 
	`c⁄√˘
(
sockfd
, (c⁄° 
sockaddr
 *)&
≥î
, (peer));

32  
sockfd
;

33 
	}
}

35 
	s˛i_¥Ÿo_hód_t
 {

36 
uöt32_t
 
	mÀn
;

37 
uöt32_t
 
	mcmd
;

38 
uöt32_t
 
	mu£r_id
;

39 
uöt32_t
 
	m£q_num
;

40 
uöt32_t
 
	mªt
;

41 
uöt8_t
 
	mbody
[];

44 
	$maö
(
¨gc
, **
¨gv
)

46 
buf
[4096] = {0};

47 
sockfd
 = 
	`c⁄√˘_to_svr
("192.168.10.181", 8165);

49 ::
ã°
::
¥Ÿo_1
 
d©a
;

50 
d©a
.
	`£t_id
(1001);

51 
d©a
.
	`£t_˙t
(10);

52 
d©a
.
	`£t_«me
("frankie");

54 ::
ã°
::
•_öfo_t
 *
•1
 = 
d©a
.
	`add_•
();

55 
•1
->
	`£t_id
(12);

56 
•1
->
	`£t_time
(130000);

57 ::
ã°
::
•_öfo_t
 *
•2
 = 
d©a
.
	`add_•
();

58 
•2
->
	`£t_id
(13);

59 
•2
->
	`£t_time
(130001);

60 
uöt32_t
 
sz
 = 
d©a
.
	`•_size
();

61 
	`¥ötf
("•_size=%u\n", 
sz
);

63 
°d
::
°rög
 
s
;

64 
d©a
.
	`SîülizeToSåög
(&
s
);

65 
uöt32_t
 
body_Àn
 = 
s
.
	`size
();

67 
˛i_¥Ÿo_hód_t
 *
hódî
 = (˛i_¥Ÿo_hód_t*)
	`mÆloc
(20 + 
body_Àn
);

68 
	`mem£t
(
hódî
, 0, 20 + 
body_Àn
);

69 
hódî
->
Àn
 = 20 + 
body_Àn
;

70 
	`mem˝y
(
hódî
->
body
, 
s
.
	`c_°r
(), 
body_Àn
);

72 
	`wrôe
(
sockfd
, 
hódî
, hódî->
Àn
);

73 
ssize_t
 
n
 = 
	`ªad
(
sockfd
, 
buf
, 4096);

88 
	`˛o£
(
sockfd
);

89 
	`‰ì
(
hódî
);

90 
	}
}

	@sample_protobuf/dispatch.cpp

1 
	~<io°ªam
>

2 
	~<°rög
>

3 
	~<asyn_£rv/√t_if.hµ
>

6 
	~"di•©ch.hµ
"

7 
	~"ã°.pb.h
"

9 
usög
 
«me•a˚
 
	g°d
;

11 ::
googÀ
::
	t¥Ÿobuf
::
	tMesßge
 
	tPrŸobufMesßge
;

13 
	$¥oc_¥Ÿo_1
(
°rög
& 
msg
)

15 
	`DEBUG_LOG
("~~~~~Fønkõ, %d", 
msg
.
	`size
());

16 
ã°
::
¥Ÿo_1
 
p
;

17 
PrŸobufMesßge
* 
ba£
 = (PrŸobufMesßge*)&
p
;

18 
ªt
 = 0;

19 i‡(
ªt
 = 
ba£
->
	`P¨£FromSåög
(
msg
))

21 c⁄° 
°rög
& 
«me
 = 
p
.
	`«me
();

22 
	`DEBUG_LOG
("===F™kõ===%d %u %u %†%u", 
ªt
, 
p
.
	`id
(),Ö.
	`˙t
(), 
«me
.
	`c_°r
(),Ö.
	`•_size
());

23 
uöt32_t
 
i
 = 0; i < 
p
.
	`•_size
(); i++) {

24 c⁄° ::
ã°
::
•_öfo_t
& 
•
 = 
p
.
	`•
(
i
);

25 
	`DEBUG_LOG
("+++Spúô+++%u %u", 
•
.
	`id
(), sp.
	`time
());

29 
	`ERROR_LOG
("parseÉrror!");

34 
	}
}

36 
	$¥oc_¥Ÿo_2
(
°rög
& 
msg
)

38 
ã°
::
¥Ÿo_1
 
p
;

39 
p
.
	`£t_id
(20);

40 
p
.
	`£t_˙t
(40);

41 
p
.
	`£t_«me
("John");

43 
p
.
	`SîülizeToSåög
(&
msg
);

46 
	}
}

48 
	$di•©ch
(*
d©a
, 
fd£ss_t
 *
fd£ss
)

50 
˛i_¥Ÿo_hód_t
 *
hódî
 = (˛i_¥Ÿo_hód_à*)
d©a
;

52 * 
body
 = (*)(
d©a
) + 20;

53 
°rög
 
	`msg
(
body
, 
hódî
->
Àn
 - (
˛i_¥Ÿo_hód_t
));

55 
	`¥oc_¥Ÿo_1
(
msg
);

57 
°rög
 
s
;

58 
	`¥oc_¥Ÿo_2
(
s
);

59 
buf
[1024] = {0};

60 
	`mem˝y
(
buf
, 
hódî
, 20);

61 
˛i_¥Ÿo_hód_t
* 
√w_hódî
 = (˛i_¥Ÿo_hód_t*)
buf
;

62 
√w_hódî
->
Àn
 = 20 + 
s
.
	`size
();

63 
	`mem˝y
(
buf
 + 20, 
s
.
	`c_°r
(), s.
	`size
());

64 
	`£nd_pkg_to_˛õ¡
((
fd£ssi⁄_t
*)
fd£ss
, 
buf
, 
√w_hódî
->
Àn
);

67 
	}
}

	@sample_protobuf/dispatch.hpp

1 #i‚de‡
__DISPATCH_HPP_


2 
	#__DISPATCH_HPP_


	)

4 
	~<°döt.h
>

7 
	~<libcomm⁄/li°.h
>

8 
	~<libcomm⁄/log.h
>

11 
	sfd£ss
 {

12 
fd
;

13 
uöt32_t
 
id
;

14 
uöt16_t
 
ªmŸe_p‹t
;

15 
uöt32_t
 
ªmŸe_ù
;

16 } 
	tfd£ss_t
;

18 #¥agm®
∑ck
(1)

20 
	s˛i_¥Ÿo_hód_t
 {

21 
uöt32_t
 
	mÀn
;

22 
uöt32_t
 
	mcmd
;

23 
uöt32_t
 
	mu£r_id
;

24 
uöt32_t
 
	m£q_num
;

25 
uöt32_t
 
	mªt
;

26 
uöt8_t
 
	mbody
[];

28 #¥agm®
∑ck
()

30 
di•©ch
(*
d©a
, 
fd£ss_t
 *
fd£ss
);

	@sample_protobuf/test.cpp

3 
	~<libcomm⁄/li°.h
>

4 
	~<libcomm⁄/log.h
>

7 
	~"ã°.hµ
"

8 
	~"di•©ch.hµ
"

23 "C" 
	$öô_£rvi˚
(
i•¨ít
)

26 
	`DEBUG_LOG
("INIT...");

27 i‡(!
i•¨ít
) {

32 
	}
}

34 "C" 
	$föi_£rvi˚
(
i•¨ít
)

36 
	`DEBUG_LOG
("FINI...");

38 
	}
}

40 "C" 
	$¥oc_evíts
()

43 
	}
}

45 "C" 
	$gë_pkg_Àn
(
fd
, c⁄° * 
pkg
, 
pkgÀn
, 
i•¨ít
)

47 
Àn
 = -1;

48 i‡(
i•¨ít
) {

58 
˛i_¥Ÿo_hód_t
* 
hódî
 = (˛i_¥Ÿo_hód_t*)
pkg
;

59 
Àn
 = 
hódî
->len;

61 
Àn
 = *(
uöt32_t
*)(
pkg
);

64 
	`DEBUG_LOG
("gëÖkgÜí=[Àn=%d fd=%d]",
Àn
,
fd
);

65  
Àn
;

66 
	}
}

68 "C" 
	$¥oc_pkg_‰om_˛õ¡
(* 
d©a
, 
Àn
, 
fd£ssi⁄_t
* 
fd£ss
)

70 
˛i_¥Ÿo_hód_t
* 
hódî
 = (˛i_¥Ÿo_hód_t*)
d©a
;

71 
	`DEBUG_LOG
("pkg†Àn=[%d]",
Àn
);

72 
	`DEBUG_LOG
("%.*s", 
Àn
-(
˛i_¥Ÿo_hód_t
), (*)
hódî
->
body
);

75 
	`di•©ch
(
d©a
, (
fd£ss_t
*)
fd£ss
);

76 
	`£nd_pkg_to_˛õ¡
(
fd£ss
, 
d©a
, 
Àn
);

80 
	}
}

82 "C" 
	$¥oc_pkg_‰om_£rv
(
fd
, * 
d©a
, 
Àn
)

84 
	}
}

86 "C" 
	$⁄_˛õ¡_c⁄n_˛o£d
(
fd
)

88 
	}
}

90 "C" 
	$⁄_fd_˛o£d
(
fd
)

92 
	}
}

	@sample_protobuf/test.hpp

1 #i‚de‡
_SERVICE_H_


2 
	#_SERVICE_H_


	)

4 
	~<asyn_£rv/√t_if.hµ
>

21 
	s˛i_¥Ÿo_hód_t
 {

22 
uöt32_t
 
	mÀn
;

23 
uöt32_t
 
	mcmd
;

24 
uöt32_t
 
	mu£r_id
;

25 
uöt32_t
 
	m£q_num
;

26 
uöt32_t
 
	mªt
;

27 
uöt8_t
 
	mbody
[];

	@sample_protobuf/test.pb.h

4 #i‚de‡
PROTOBUF_ã°_2ïrŸo__INCLUDED


5 
	#PROTOBUF_ã°_2ïrŸo__INCLUDED


	)

7 
	~<°rög
>

9 
	~<googÀ/¥Ÿobuf/°ubs/comm⁄.h
>

11 #i‡
GOOGLE_PROTOBUF_VERSION
 < 2005000

12 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
a
 
√wî
 
vîsi⁄
 
of
 
¥Ÿoc
 
which
 
is


13 #îr‹ 
öcom∑tibÀ
 
wôh
 
your
 
PrŸocﬁ
 
Buf„r
 
hódîs
. 
PÀa£
 
upd©e


14 #îr‹ 
your
 
hódîs
.

16 #i‡2005000 < 
GOOGLE_PROTOBUF_MIN_PROTOC_VERSION


17 #îr‹ 
This
 
fûe
 
was
 
gíî©ed
 
by
 
™
 
ﬁdî
 
vîsi⁄
 
of
 
¥Ÿoc
 
which
 
is


18 #îr‹ 
öcom∑tibÀ
 
wôh
 
your
 
PrŸocﬁ
 
Buf„r
 
hódîs
. 
PÀa£


19 #îr‹ 
ªgíî©e
 
this
 
fûe
 
wôh
 
a
 
√wî
 
vîsi⁄
 
of
 
¥Ÿoc
.

22 
	~<googÀ/¥Ÿobuf/gíî©ed_mesßge_utû.h
>

23 
	~<googÀ/¥Ÿobuf/mesßge.h
>

24 
	~<googÀ/¥Ÿobuf/ª≥©ed_fõld.h
>

25 
	~<googÀ/¥Ÿobuf/exãnsi⁄_£t.h
>

26 
	~<googÀ/¥Ÿobuf/unknown_fõld_£t.h
>

29 
«me•a˚
 
	gã°
 {

32 
¥Ÿobuf_AddDesc_ã°_2ïrŸo
();

33 
¥Ÿobuf_AssignDesc_ã°_2ïrŸo
();

34 
¥Ÿobuf_ShutdownFûe_ã°_2ïrŸo
();

36 
˛ass
 
	g•_öfo_t
;

37 
˛ass
 
	g¥Ÿo_1
;

41 ˛as†
	c•_öfo_t
 : 
public
 ::
googÀ
::
¥Ÿobuf
::
Mesßge
 {

42 
public
:

43 
•_öfo_t
();

44 
	gvútuÆ
 ~
•_öfo_t
();

46 
•_öfo_t
(c⁄° sp_öfo_t& 
‰om
);

48 
ölöe
 
	g•_öfo_t
& 
	g›î©‹
=(c⁄° 
•_öfo_t
& 
‰om
) {

49 
C›yFrom
(
‰om
);

50  *
	gthis
;

53 
ölöe
 c⁄° ::
googÀ
::
¥Ÿobuf
::
UnknownFõldSë
& 
unknown_fõlds
() const {

54  
_unknown_fõlds_
;

57 
	gölöe
 ::
googÀ
::
¥Ÿobuf
::
UnknownFõldSë
* 
muèbÀ_unknown_fõlds
() {

58  &
_unknown_fõlds_
;

61 c⁄° ::
googÀ
::
¥Ÿobuf
::
Des¸ùt‹
* 
des¸ùt‹
();

62 c⁄° 
	g•_öfo_t
& 
deÁu…_ö°™˚
();

64 
Sw≠
(
•_öfo_t
* 
Ÿhî
);

68 
•_öfo_t
* 
New
() const;

69 
C›yFrom
(c⁄° ::
googÀ
::
¥Ÿobuf
::
Mesßge
& 
‰om
);

70 
MîgeFrom
(c⁄° ::
googÀ
::
¥Ÿobuf
::
Mesßge
& 
‰om
);

71 
C›yFrom
(c⁄° 
•_öfo_t
& 
‰om
);

72 
MîgeFrom
(c⁄° 
•_öfo_t
& 
‰om
);

73 
CÀ¨
();

74 
boﬁ
 
IsInôülized
() const;

76 
ByãSize
() const;

77 
boﬁ
 
MîgeP¨tülFromCodedSåóm
(

78 ::
googÀ
::
¥Ÿobuf
::
io
::
CodedI≈utSåóm
* 
öput
);

79 
SîülizeWôhCachedSizes
(

80 ::
googÀ
::
¥Ÿobuf
::
io
::
CodedOuçutSåóm
* 
ouçut
) const;

81 ::
googÀ
::
¥Ÿobuf
::
uöt8
* 
SîülizeWôhCachedSizesToAºay
(::googÀ::¥Ÿobuf::uöt8* 
ouçut
) const;

82 
GëCachedSize
(Ëc⁄° {  
	g_ˇched_size_
; }

83 
	g¥iv©e
:

84 
Sh¨edCt‹
();

85 
Sh¨edDt‹
();

86 
SëCachedSize
(
size
) const;

87 
	gpublic
:

89 ::
googÀ
::
¥Ÿobuf
::
Mëad©a
 
GëMëad©a
() const;

96 
ölöe
 
boﬁ
 
has_id
() const;

97 
ölöe
 
˛ór_id
();

98 c⁄° 
	gkIdFõldNumbî
 = 1;

99 
	gölöe
 ::
googÀ
::
¥Ÿobuf
::
uöt32
 
id
() const;

100 
ölöe
 
£t_id
(::
googÀ
::
¥Ÿobuf
::
uöt32
 
vÆue
);

103 
ölöe
 
boﬁ
 
has_time
() const;

104 
ölöe
 
˛ór_time
();

105 c⁄° 
	gkTimeFõldNumbî
 = 2;

106 
	gölöe
 ::
googÀ
::
¥Ÿobuf
::
uöt32
 
time
() const;

107 
ölöe
 
£t_time
(::
googÀ
::
¥Ÿobuf
::
uöt32
 
vÆue
);

110 
	g¥iv©e
:

111 
ölöe
 
£t_has_id
();

112 
ölöe
 
˛ór_has_id
();

113 
ölöe
 
£t_has_time
();

114 
ölöe
 
˛ór_has_time
();

116 ::
googÀ
::
¥Ÿobuf
::
UnknownFõldSë
 
_unknown_fõlds_
;

118 ::
googÀ
::
¥Ÿobuf
::
uöt32
 
id_
;

119 ::
googÀ
::
¥Ÿobuf
::
uöt32
 
time_
;

121 
muèbÀ
 
	g_ˇched_size_
;

122 ::
googÀ
::
¥Ÿobuf
::
uöt32
 
_has_bôs_
[(2 + 31) / 32];

124 
‰õnd
 
¥Ÿobuf_AddDesc_ã°_2ïrŸo
();

125 
‰õnd
 
¥Ÿobuf_AssignDesc_ã°_2ïrŸo
();

126 
‰õnd
 
¥Ÿobuf_ShutdownFûe_ã°_2ïrŸo
();

128 
InôAsDeÁu…In°™˚
();

129 
•_öfo_t
* 
	gdeÁu…_ö°™˚_
;

133 ˛as†
	c¥Ÿo_1
 : 
public
 ::
googÀ
::
¥Ÿobuf
::
Mesßge
 {

134 
public
:

135 
¥Ÿo_1
();

136 
	gvútuÆ
 ~
¥Ÿo_1
();

138 
¥Ÿo_1
(c⁄°ÖrŸo_1& 
‰om
);

140 
ölöe
 
	g¥Ÿo_1
& 
	g›î©‹
=(c⁄° 
¥Ÿo_1
& 
‰om
) {

141 
C›yFrom
(
‰om
);

142  *
	gthis
;

145 
ölöe
 c⁄° ::
googÀ
::
¥Ÿobuf
::
UnknownFõldSë
& 
unknown_fõlds
() const {

146  
_unknown_fõlds_
;

149 
	gölöe
 ::
googÀ
::
¥Ÿobuf
::
UnknownFõldSë
* 
muèbÀ_unknown_fõlds
() {

150  &
_unknown_fõlds_
;

153 c⁄° ::
googÀ
::
¥Ÿobuf
::
Des¸ùt‹
* 
des¸ùt‹
();

154 c⁄° 
	g¥Ÿo_1
& 
deÁu…_ö°™˚
();

156 
Sw≠
(
¥Ÿo_1
* 
Ÿhî
);

160 
¥Ÿo_1
* 
New
() const;

161 
C›yFrom
(c⁄° ::
googÀ
::
¥Ÿobuf
::
Mesßge
& 
‰om
);

162 
MîgeFrom
(c⁄° ::
googÀ
::
¥Ÿobuf
::
Mesßge
& 
‰om
);

163 
C›yFrom
(c⁄° 
¥Ÿo_1
& 
‰om
);

164 
MîgeFrom
(c⁄° 
¥Ÿo_1
& 
‰om
);

165 
CÀ¨
();

166 
boﬁ
 
IsInôülized
() const;

168 
ByãSize
() const;

169 
boﬁ
 
MîgeP¨tülFromCodedSåóm
(

170 ::
googÀ
::
¥Ÿobuf
::
io
::
CodedI≈utSåóm
* 
öput
);

171 
SîülizeWôhCachedSizes
(

172 ::
googÀ
::
¥Ÿobuf
::
io
::
CodedOuçutSåóm
* 
ouçut
) const;

173 ::
googÀ
::
¥Ÿobuf
::
uöt8
* 
SîülizeWôhCachedSizesToAºay
(::googÀ::¥Ÿobuf::uöt8* 
ouçut
) const;

174 
GëCachedSize
(Ëc⁄° {  
	g_ˇched_size_
; }

175 
	g¥iv©e
:

176 
Sh¨edCt‹
();

177 
Sh¨edDt‹
();

178 
SëCachedSize
(
size
) const;

179 
	gpublic
:

181 ::
googÀ
::
¥Ÿobuf
::
Mëad©a
 
GëMëad©a
() const;

188 
ölöe
 
boﬁ
 
has_id
() const;

189 
ölöe
 
˛ór_id
();

190 c⁄° 
	gkIdFõldNumbî
 = 1;

191 
	gölöe
 ::
googÀ
::
¥Ÿobuf
::
uöt32
 
id
() const;

192 
ölöe
 
£t_id
(::
googÀ
::
¥Ÿobuf
::
uöt32
 
vÆue
);

195 
ölöe
 
boﬁ
 
has_˙t
() const;

196 
ölöe
 
˛ór_˙t
();

197 c⁄° 
	gkC¡FõldNumbî
 = 2;

198 
	gölöe
 ::
googÀ
::
¥Ÿobuf
::
uöt32
 
˙t
() const;

199 
ölöe
 
£t_˙t
(::
googÀ
::
¥Ÿobuf
::
uöt32
 
vÆue
);

202 
ölöe
 
boﬁ
 
has_«me
() const;

203 
ölöe
 
˛ór_«me
();

204 c⁄° 
	gkNameFõldNumbî
 = 3;

205 
ölöe
 c⁄° ::
°d
::
°rög
& 
«me
() const;

206 
ölöe
 
£t_«me
(c⁄° ::
°d
::
°rög
& 
vÆue
);

207 
ölöe
 
£t_«me
(c⁄° * 
vÆue
);

208 
ölöe
 
£t_«me
(c⁄° * 
vÆue
, 
size_t
 
size
);

209 
	gölöe
 ::
°d
::
°rög
* 
muèbÀ_«me
();

210 
	gölöe
 ::
°d
::
°rög
* 
ªÀa£_«me
();

211 
ölöe
 
£t_Æloˇãd_«me
(::
°d
::
°rög
* 
«me
);

214 
ölöe
 
•_size
() const;

215 
ölöe
 
˛ór_•
();

216 c⁄° 
	gkSpFõldNumbî
 = 4;

217 
ölöe
 c⁄° ::
ã°
::
•_öfo_t
& 
•
(
ödex
) const;

218 
	gölöe
 ::
ã°
::
•_öfo_t
* 
muèbÀ_•
(
ödex
);

219 
	gölöe
 ::
ã°
::
•_öfo_t
* 
add_•
();

220 
ölöe
 c⁄° ::
googÀ
::
¥Ÿobuf
::
RïóãdPåFõld
< ::
ã°
::
•_öfo_t
 >&

221 
•
() const;

222 
	gölöe
 ::
googÀ
::
¥Ÿobuf
::
RïóãdPåFõld
< ::
ã°
::
•_öfo_t
 >*

223 
muèbÀ_•
();

226 
	g¥iv©e
:

227 
ölöe
 
£t_has_id
();

228 
ölöe
 
˛ór_has_id
();

229 
ölöe
 
£t_has_˙t
();

230 
ölöe
 
˛ór_has_˙t
();

231 
ölöe
 
£t_has_«me
();

232 
ölöe
 
˛ór_has_«me
();

234 ::
googÀ
::
¥Ÿobuf
::
UnknownFõldSë
 
_unknown_fõlds_
;

236 ::
googÀ
::
¥Ÿobuf
::
uöt32
 
id_
;

237 ::
googÀ
::
¥Ÿobuf
::
uöt32
 
˙t_
;

238 ::
°d
::
°rög
* 
«me_
;

239 ::
googÀ
::
¥Ÿobuf
::
RïóãdPåFõld
< ::
ã°
::
•_öfo_t
 > 
•_
;

241 
muèbÀ
 
	g_ˇched_size_
;

242 ::
googÀ
::
¥Ÿobuf
::
uöt32
 
_has_bôs_
[(4 + 31) / 32];

244 
‰õnd
 
¥Ÿobuf_AddDesc_ã°_2ïrŸo
();

245 
‰õnd
 
¥Ÿobuf_AssignDesc_ã°_2ïrŸo
();

246 
‰õnd
 
¥Ÿobuf_ShutdownFûe_ã°_2ïrŸo
();

248 
InôAsDeÁu…In°™˚
();

249 
¥Ÿo_1
* 
	gdeÁu…_ö°™˚_
;

259 
ölöe
 
boﬁ
 
	g•_öfo_t
::
	$has_id
() const {

260  (
_has_bôs_
[0] & 0x00000001u) != 0;

261 
	}
}

262 
ölöe
 
	g•_öfo_t
::
	$£t_has_id
() {

263 
_has_bôs_
[0] |= 0x00000001u;

264 
	}
}

265 
ölöe
 
	g•_öfo_t
::
	$˛ór_has_id
() {

266 
_has_bôs_
[0] &= ~0x00000001u;

267 
	}
}

268 
ölöe
 
	g•_öfo_t
::
	$˛ór_id
() {

269 
id_
 = 0u;

270 
	`˛ór_has_id
();

271 
	}
}

272 
	gölöe
 ::
googÀ
::
¥Ÿobuf
::
uöt32
 
•_öfo_t
::
	$id
() const {

273  
id_
;

274 
	}
}

275 
ölöe
 
	g•_öfo_t
::
£t_id
(::
googÀ
::
¥Ÿobuf
::
uöt32
 
vÆue
) {

276 
£t_has_id
();

277 
	gid_
 = 
vÆue
;

281 
ölöe
 
boﬁ
 
	g•_öfo_t
::
	$has_time
() const {

282  (
_has_bôs_
[0] & 0x00000002u) != 0;

283 
	}
}

284 
ölöe
 
	g•_öfo_t
::
	$£t_has_time
() {

285 
_has_bôs_
[0] |= 0x00000002u;

286 
	}
}

287 
ölöe
 
	g•_öfo_t
::
	$˛ór_has_time
() {

288 
_has_bôs_
[0] &= ~0x00000002u;

289 
	}
}

290 
ölöe
 
	g•_öfo_t
::
	$˛ór_time
() {

291 
time_
 = 0u;

292 
	`˛ór_has_time
();

293 
	}
}

294 
	gölöe
 ::
googÀ
::
¥Ÿobuf
::
uöt32
 
•_öfo_t
::
	$time
() const {

295  
time_
;

296 
	}
}

297 
ölöe
 
	g•_öfo_t
::
£t_time
(::
googÀ
::
¥Ÿobuf
::
uöt32
 
vÆue
) {

298 
£t_has_time
();

299 
	gtime_
 = 
vÆue
;

307 
ölöe
 
boﬁ
 
	g¥Ÿo_1
::
	$has_id
() const {

308  (
_has_bôs_
[0] & 0x00000001u) != 0;

309 
	}
}

310 
ölöe
 
	g¥Ÿo_1
::
	$£t_has_id
() {

311 
_has_bôs_
[0] |= 0x00000001u;

312 
	}
}

313 
ölöe
 
	g¥Ÿo_1
::
	$˛ór_has_id
() {

314 
_has_bôs_
[0] &= ~0x00000001u;

315 
	}
}

316 
ölöe
 
	g¥Ÿo_1
::
	$˛ór_id
() {

317 
id_
 = 0u;

318 
	`˛ór_has_id
();

319 
	}
}

320 
	gölöe
 ::
googÀ
::
¥Ÿobuf
::
uöt32
 
¥Ÿo_1
::
	$id
() const {

321  
id_
;

322 
	}
}

323 
ölöe
 
	g¥Ÿo_1
::
£t_id
(::
googÀ
::
¥Ÿobuf
::
uöt32
 
vÆue
) {

324 
£t_has_id
();

325 
	gid_
 = 
vÆue
;

329 
ölöe
 
boﬁ
 
	g¥Ÿo_1
::
	$has_˙t
() const {

330  (
_has_bôs_
[0] & 0x00000002u) != 0;

331 
	}
}

332 
ölöe
 
	g¥Ÿo_1
::
	$£t_has_˙t
() {

333 
_has_bôs_
[0] |= 0x00000002u;

334 
	}
}

335 
ölöe
 
	g¥Ÿo_1
::
	$˛ór_has_˙t
() {

336 
_has_bôs_
[0] &= ~0x00000002u;

337 
	}
}

338 
ölöe
 
	g¥Ÿo_1
::
	$˛ór_˙t
() {

339 
˙t_
 = 0u;

340 
	`˛ór_has_˙t
();

341 
	}
}

342 
	gölöe
 ::
googÀ
::
¥Ÿobuf
::
uöt32
 
¥Ÿo_1
::
	$˙t
() const {

343  
˙t_
;

344 
	}
}

345 
ölöe
 
	g¥Ÿo_1
::
£t_˙t
(::
googÀ
::
¥Ÿobuf
::
uöt32
 
vÆue
) {

346 
£t_has_˙t
();

347 
	g˙t_
 = 
vÆue
;

351 
ölöe
 
boﬁ
 
	g¥Ÿo_1
::
	$has_«me
() const {

352  (
_has_bôs_
[0] & 0x00000004u) != 0;

353 
	}
}

354 
ölöe
 
	g¥Ÿo_1
::
	$£t_has_«me
() {

355 
_has_bôs_
[0] |= 0x00000004u;

356 
	}
}

357 
ölöe
 
	g¥Ÿo_1
::
	$˛ór_has_«me
() {

358 
_has_bôs_
[0] &= ~0x00000004u;

359 
	}
}

360 
ölöe
 
	g¥Ÿo_1
::
	$˛ór_«me
() {

361 i‡(
«me_
 !&::
googÀ
::
¥Ÿobuf
::
öã∫Æ
::
kEm±ySåög
) {

362 
«me_
->
	`˛ór
();

364 
	`˛ór_has_«me
();

365 
	}
}

366 
ölöe
 c⁄° ::
°d
::
°rög
& 
¥Ÿo_1
::
	$«me
() const {

367  *
«me_
;

368 
	}
}

369 
ölöe
 
	g¥Ÿo_1
::
£t_«me
(c⁄° ::
°d
::
°rög
& 
vÆue
) {

370 
£t_has_«me
();

371 i‡(
	g«me_
 =&::
googÀ
::
¥Ÿobuf
::
öã∫Æ
::
kEm±ySåög
) {

372 
«me_
 = 
√w
 ::
°d
::
°rög
;

374 
	g«me_
->
assign
(
vÆue
);

376 
ölöe
 
	g¥Ÿo_1
::
	$£t_«me
(c⁄° * 
vÆue
) {

377 
	`£t_has_«me
();

378 i‡(
«me_
 =&::
googÀ
::
¥Ÿobuf
::
öã∫Æ
::
kEm±ySåög
) {

379 
«me_
 = 
√w
 ::
°d
::
°rög
;

381 
«me_
->
	`assign
(
vÆue
);

382 
	}
}

383 
ölöe
 
	g¥Ÿo_1
::
	$£t_«me
(c⁄° * 
vÆue
, 
size_t
 
size
) {

384 
	`£t_has_«me
();

385 i‡(
«me_
 =&::
googÀ
::
¥Ÿobuf
::
öã∫Æ
::
kEm±ySåög
) {

386 
«me_
 = 
√w
 ::
°d
::
°rög
;

388 
«me_
->
	`assign
(
ªöãΩªt_ˇ°
<c⁄° *>(
vÆue
), 
size
);

389 
	}
}

390 
	gölöe
 ::
°d
::
°rög
* 
¥Ÿo_1
::
	$muèbÀ_«me
() {

391 
	`£t_has_«me
();

392 i‡(
«me_
 =&::
googÀ
::
¥Ÿobuf
::
öã∫Æ
::
kEm±ySåög
) {

393 
«me_
 = 
√w
 ::
°d
::
°rög
;

395  
«me_
;

396 
	}
}

397 
	gölöe
 ::
°d
::
°rög
* 
¥Ÿo_1
::
	$ªÀa£_«me
() {

398 
	`˛ór_has_«me
();

399 i‡(
«me_
 =&::
googÀ
::
¥Ÿobuf
::
öã∫Æ
::
kEm±ySåög
) {

400  
NULL
;

402 ::
°d
::
°rög
* 
ãmp
 = 
«me_
;

403 
«me_
 = 
c⁄°_ˇ°
< ::
°d
::
°rög
*>(&::
googÀ
::
¥Ÿobuf
::
öã∫Æ
::
kEm±ySåög
);

404  
ãmp
;

406 
	}
}

407 
ölöe
 
	g¥Ÿo_1
::
£t_Æloˇãd_«me
(::
°d
::
°rög
* 
«me
) {

408 i‡(
«me_
 !&::
googÀ
::
¥Ÿobuf
::
öã∫Æ
::
kEm±ySåög
) {

409 
dñëe
 
«me_
;

411 i‡(
	g«me
) {

412 
£t_has_«me
();

413 
	g«me_
 = 
«me
;

415 
˛ór_has_«me
();

416 
	g«me_
 = 
c⁄°_ˇ°
< ::
°d
::
°rög
*>(&::
googÀ
::
¥Ÿobuf
::
öã∫Æ
::
kEm±ySåög
);

421 
ölöe
 
	g¥Ÿo_1
::
	$•_size
() const {

422  
•_
.
	`size
();

423 
	}
}

424 
ölöe
 
	g¥Ÿo_1
::
	$˛ór_•
() {

425 
•_
.
	`CÀ¨
();

426 
	}
}

427 
ölöe
 c⁄° ::
ã°
::
•_öfo_t
& 
¥Ÿo_1
::
	$•
(
ödex
) const {

428  
•_
.
	`Gë
(
ödex
);

429 
	}
}

430 
	gölöe
 ::
ã°
::
•_öfo_t
* 
¥Ÿo_1
::
	$muèbÀ_•
(
ödex
) {

431  
•_
.
	`MuèbÀ
(
ödex
);

432 
	}
}

433 
	gölöe
 ::
ã°
::
•_öfo_t
* 
¥Ÿo_1
::
	$add_•
() {

434  
•_
.
	`Add
();

435 
	}
}

436 
ölöe
 c⁄° ::
googÀ
::
¥Ÿobuf
::
RïóãdPåFõld
< ::
ã°
::
•_öfo_t
 >&

437 
¥Ÿo_1
::
	$•
() const {

438  
•_
;

439 
	}
}

440 
	gölöe
 ::
googÀ
::
¥Ÿobuf
::
RïóãdPåFõld
< ::
ã°
::
•_öfo_t
 >*

441 
¥Ÿo_1
::
	$muèbÀ_•
() {

442  &
•_
;

443 
	}
}

450 #i‚de‡
SWIG


451 
«me•a˚
 
	ggoogÀ
 {

452 
«me•a˚
 
	g¥Ÿobuf
 {

	@shmq.cpp

1 
	~<°rög.h
>

2 
	~<time.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<î∫o.h
>

6 
	~<as£π.h
>

7 
	~<sys/mm™.h
>

8 
	~<uni°d.h
>

9 
	~<sys/£m.h
>

10 
	~<sys/shm.h
>

11 
	~<sys/ùc.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<f˙é.h
>

16 
	~<libcomm⁄/log.h
>

17 
	~<libcomm⁄/c⁄f_∑r£r/c⁄fig.h
>

19 
	~"bödög.hµ
"

20 
	~"shmq.hµ
"

21 
	~"d´m⁄.hµ
"

22 
	~"utû.hµ
"

23 
	~"√t_if.hµ
"

25 
ShmqQueue
::
	$ShmqQueue
()

28 
	}
}

30 
ShmqQueue
::~
	$ShmqQueue
()

32 
shmq_addr
 = 0;

33 
Àngth
 = 0;

34 
	}
}

37 
ShmqQueue
::
	$gë_pùe_h™dÀ
(
i
)

39  
pùe_h™dÀs
[
i
];

40 
	}
}

43 
ShmqQueue
::
	$¸óã
()

45 
Àngth
 = 
	`c⁄fig_gë_ötvÆ
("shmq_length", 1 << 26);

46 
shmq_addr
 = (
shmq_hód_t
*Ë
	`mm≠
 (
NULL
, 
Àngth
, 
PROT_READ
 | 
PROT_WRITE
,

47 
MAP_SHARED
 | 
MAP_ANON
, -1, 0);

48 i‡(
shmq_addr
 =
MAP_FAILED
)

49 
	`ERROR_RETURN
 (("mm≠ faûed, %s", 
	`°ªº‹
 (
î∫o
)), -1);

51 
shmq_addr
->
hód
 = (
shmq_hód_t
);

52 
shmq_addr
->
èû
 = (
shmq_hód_t
);

53 
	`©omic_£t
(&(
shmq_addr
->
block_˙t
), 0);

54 
îr
 = 
	`¸óã_pùe
();

56 
	`BOOT_LOG
 (
îr
, "¸óã shmq mem‹y queue: %dMB", 
Àngth
 / 1024 / 512);

58 
	}
}

61 
ShmqQueue
::
	$de°roy
()

63 i‡(
shmq_addr
) {

64 
	`munm≠
(
shmq_addr
, 
Àngth
);

65 
shmq_addr
 = 0;

68 
	}
}

71 
ShmqQueue
::
	$˛o£_pùe
(
i
)

74 i‡(
i
 == 2) {

75 
	`˛o£
(
pùe_h™dÀs
[0]);

76 
	`˛o£
(
pùe_h™dÀs
[1]);

78 
	`˛o£
(
pùe_h™dÀs
[
i
]);

80 
	}
}

83 
ShmqQueue
::
	$p›_d©a
(
shmq_block_t
** 
blk
)

86 i‡(
shmq_addr
->
èû
 =shmq_addr->
hód
) {

90 
	`£t_èû_pos
();

92 i‡(
shmq_addr
->
èû
 =shmq_addr->
hód
) {

96 
shmq_block_t
* 
cur_blk
 = 
	`èû_block
();

97 
hód_pos
 = 
shmq_addr
->
hód
;

98 #ifde‡
DEBUG


100 i‡(
cur_blk
->
Àn
 < (
shmq_block_t
)

101 || (
shmq_addr
->
èû
 < 
hód_pos
 && shmq_addr->èû + ()
cur_blk
->
Àn
 > head_pos)

102 || (
shmq_addr
->
èû
 > 
hód_pos
 && shmq_addr->èû + ()
cur_blk
->
Àn
 > ()
Àngth
)) {

103 
	`ERROR_LOG
("shm_queuêèû=%d,hód=%d,shmq_blockÜígth=%d", 
shmq_addr
->
èû
, 
hód_pos
, 
cur_blk
->
Àn
);

104 
	`exô
(-1);

107 i‡(
cur_blk
->
Àn
 > (
uöt32_t
)
∑ge_size
)

108 
	`ERROR_RETURN
(("toÿœrgêblock,Üí=%d %d", 
cur_blk
->
Àn
, 
∑ge_size
), -1);

110 *
blk
 = 
cur_blk
;

111 
shmq_addr
->
èû
 +
cur_blk
->
Àn
;

117 
	}
}

120 
ShmqQueue
::
	$push_d©a
(
shmq_block_t
* 
blk
, c⁄° * 
d©a
)

122 
	`as£π
(
blk
->
Àn
 >(
shmq_block_t
));

124 i‡(
blk
->
Àn
 > (
uöt32_t
)
∑ge_size
) {

125 
	`ERROR_LOG
("toÿœrgê∑ckë,Üí=%d", 
blk
->
Àn
);

129 i‡(
	`£t_hód_pos
(
blk
) == -1) {

133 
waô_tm
;

134 
waô_tm
 = 0; wait_tm != 10; ++wait_tm) {

136 i‡(
	`u∆ikñy
–(
shmq_addr
->
èû
 > shmq_addr->
hód
) &&

137 (
shmq_addr
->
èû
 < shmq_addr->
hód
 + ()
blk
->
Àn
 + 
∑ge_size
)) ) {

138 
	`ALERT_LOG
("queuê[%p] i†fuŒ, waô 5 mi¸o£cs: [waô_tm=%d]", 
this
, 
waô_tm
);

139 
	`u¶ìp
(5);

145 i‡(
	`u∆ikñy
(
waô_tm
 == 10)) {

146 
	`ALERT_LOG
("queuê[%p] i†fuŒ.", 
this
);

150 * 
√xt_blk
 = (*)
	`hód_block
();

151 
	`mem˝y
(
√xt_blk
, 
blk
, (
shmq_block_t
));

152 i‡(
	`likñy
(
blk
->
Àn
 > (
shmq_block_t
))) {

153 
	`mem˝y
(
√xt_blk
 + (
shmq_block_t
), 
d©a
, 
blk
->
Àn
 - (shmq_block_t));

156 
shmq_addr
->
hód
 +
blk
->
Àn
;

159 
	`wrôe
(
pùe_h™dÀs
[1], 
this
, 1);

164 
	}
}

167 
ShmqQueue
::
	$¸óã_pùe
()

169 i‡(
	`pùe
(
pùe_h™dÀs
) == -1)

172 
rÊag
, 
wÊag
;

173 i‡(
	`c⁄fig_gë_ötvÆ
("set_pipe_noatime", 0) == 1) {

174 
rÊag
 = 
O_NONBLOCK
 | 
O_RDONLY
 | 
O_NOATIME
;

175 
wÊag
 = 
O_NONBLOCK
 | 
O_WRONLY
 | 
O_NOATIME
;

177 
rÊag
 = 
O_NONBLOCK
 | 
O_RDONLY
;

178 
wÊag
 = 
O_NONBLOCK
 | 
O_WRONLY
;

181 
	`f˙é
(
pùe_h™dÀs
[0], 
F_SETFL
, 
rÊag
);

182 
	`f˙é
(
pùe_h™dÀs
[1], 
F_SETFL
, 
wÊag
);

184 
	`f˙é
(
pùe_h™dÀs
[0], 
F_SETFD
, 
FD_CLOEXEC
);

185 
	`f˙é
(
pùe_h™dÀs
[1], 
F_SETFD
, 
FD_CLOEXEC
);

188 
	}
}

191 
ShmqQueue
::
	$£t_èû_pos
()

193 
shmq_block_t
 *
blk
;

194 i‡(
	`likñy
(
shmq_addr
->
hód
 >shmq_addr->
èû
)) {

198 
blk
 = 
	`èû_block
();

199 i‡(
Àngth
 - 
shmq_addr
->
èû
 <  (
shmq_block_t
)

200 || 
blk
->
ty≥
 =
em_du°_block
) {

201 
shmq_addr
->
èû
 = (
shmq_hód_t
);

205 
	}
}

208 
ShmqQueue
::
	$£t_hód_pos
(c⁄° 
shmq_block_t
 *
blk
)

210 
èû_pos
 = 
shmq_addr
->
èû
;

211 
hód_pos
 = 
shmq_addr
->
hód
;

213 
suΩlus
 = 
Àngth
 - 
hód_pos
;

215 i‡(
	`u∆ikñy
(
suΩlus
 < ()
blk
->
Àn
))

217 i‡(
	`u∆ikñy
(
èû_pos
 > 
hód_pos
)) {

218 
	`ERROR_LOG
("shm_queue bug, head=%d,Åail=%d, blk_len=%d,Åotal_len=%u",

219 
hód_pos
, 
èû_pos
, 
blk
->
Àn
, 
Àngth
);

220 
shmq_addr
->
èû
 = (
shmq_hód_t
);

221 
shmq_addr
->
hód
 = (
shmq_hód_t
);

222 } i‡(
	`u∆ikñy
(
èû_pos
 = (
shmq_hód_t
))){

224 
	`ERROR_RETURN
 (("shm_queue is full,head=%d,tail=%d,blk_len=%d",

225 
hód_pos
, 
èû_pos
, 
blk
->
Àn
), -1);

226 } i‡(
	`u∆ikñy
(
suΩlus
 < ()(
shmq_block_t
))) {

227 
shmq_addr
->
hód
 =  (
shmq_hód_t
);

230 
shmq_block_t
 *
du°_blk
;

231 
du°_blk
 = 
	`hód_block
();

232 
du°_blk
->
ty≥
 = 
em_du°_block
;

233 
du°_blk
->
Àn
 = 
suΩlus
;

234 
du°_blk
->
id
 = 0;

235 
shmq_addr
->
hód
 = (
shmq_hód_t
);

240 
	}
}

	@shmq.hpp

1 #i‚de‡
ASYNC_SERVER__SHMQ_H_


2 
	#ASYNC_SERVER__SHMQ_H_


	)

4 
	~<°döt.h
>

5 
	~<sys/ùc.h
>

6 
	~<sys/£m.h
>

7 
	~<uni°d.h
>

9 
	~<libcomm⁄/©omic.h
>

11 
	~"sockë.hµ
"

13 
	#LOCKED_MASK
 0x01

	)

14 
	#SLEEP_MASK
 0x02

	)

15 
	#SHM_BLOCK_LEN_MAX
 1<<23

	)

25 
	eshmq_block_ty≥_t
{

26 
	mem_d©a_block
 = 0,

27 
	mem_du°_block
,

28 
	mem_fö_block
,

29 
	mem_›í_block
,

30 
	mem_˛o£_block
,

33 
	sshmq_hód_t
 {

34 vﬁ©ûê
	mhód
;

35 vﬁ©ûê
	mèû
;

36 
©omic_t
 
	mblock_˙t
;

37 } 
__©åibuã__
 ((
∑cked
));

39 
	sshmq_block_t
 {

40 
uöt32_t
 
	mid
;

41 
uöt32_t
 
	mfd
;

42 
uöt32_t
 
	mÀn
;

43 
	mty≥
;

44 
uöt8_t
 
	md©a
[];

45 } 
__©åibuã__
 ((
∑cked
));

47 ˛as†
	cShmqQueue
 {

48 
	mpublic
:

49 
ShmqQueue
();

50 ~
ShmqQueue
();

52 
¸óã
();

53 
de°roy
();

55 
gë_pùe_h™dÀ
(
i
);

57 
p›_d©a
(
shmq_block_t
** 
blk
);

58 
push_d©a
(
shmq_block_t
* 
mb
, c⁄° * 
d©a
);

59 
˛o£_pùe
(
i
 = 2);

60 
	m¥iv©e
:

61 
ölöe
 
shmq_block_t
* 
	$hód_block
()

62 { (
shmq_block_t
*)((*)
shmq_addr
 + shmq_addr->
hód
);}

63 
ölöe
 
shmq_block_t
* 
	$èû_block
()

64 { (
shmq_block_t
*)((*)
shmq_addr
 + shmq_addr->
èû
);
	}
}

66 
¸óã_pùe
();

67 
£t_èû_pos
();

68 
£t_hód_pos
(c⁄° 
shmq_block_t
 *
blk
);

69 
	g¥iv©e
:

70 
shmq_hód_t
* 
shmq_addr
;

71 
uöt32_t
 
	gÀngth
;

72 
	gpùe_h™dÀs
[2];

	@socket.cpp

1 
	~<as£π.h
>

2 
	~<¨∑/öë.h
>

3 
	~<sys/sockë.h
>

4 
	~<uni°d.h
>

5 
	~<°dlib.h
>

6 
	~<f˙é.h
>

7 
	~<°dio.h
>

8 
	~<löux/ty≥s.h
>

9 
	~<°rög.h
>

10 
	~<î∫o.h
>

11 
	~<time.h
>

12 
	~<sys/time.h
>

15 
	~<libcomm⁄/log.h
>

16 
	~<libcomm⁄/time/time.h
>

17 
	~<libcomm⁄/c⁄f_∑r£r/c⁄fig.h
>

18 
	~<libcomm⁄/öë/t˝.h
>

20 
	~"bödög.hµ
"

21 
	~"d´m⁄.hµ
"

22 
	~"utû.hµ
"

24 
	~"dŒ.hµ
"

25 
	~"mˇ°.hµ
"

26 
	~"√t_if.hµ
"

27 
	~"w‹kî.hµ
"

29 
	~"sockë.hµ
"

31 
SockëC⁄n
 
g_sock_c⁄n
;

34 
	måash_size
 = 4096,

35 
	mmˇ°_pkg_size
 = 8192,

36 
	mudp_pkg_size
 = 8192

40 
	gfd_buff_t
::
	$öô_ªcv_buff
()

42 
ªcv_pkg_Àn
 = 0;

43 
ªcv_Àn
 = 0;

44 
ªcv_buf
 = (
uöt8_t
*)
	`mm≠
(0, 
∑ge_size
, 
PROT_READ
 | 
PROT_WRITE
,

45 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

46 i‡(
ªcv_buf
 =
MAP_FAILED
) {

47 
	`ERROR_LOG
("mmap failed");

51 
sw≠_ªcv_buf
 = (
uöt8_t
*)
	`mm≠
(0, 
∑ge_size
, 
PROT_READ
 | 
PROT_WRITE
,

52 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

53 i‡(
sw≠_ªcv_buf
 =
MAP_FAILED
) {

54 
	`ERROR_LOG
("mmap failed");

57 
	`TRACE_LOG
("frame:fd initÑecv buff");

59 
	}
}

62 
	gfd_buff_t
::
	$öô_£nd_buff
(
uöt32_t
 
size
)

64 i‡(!
£nd_buf
) {

65 
£nd_buf
 = (
uöt8_t
*)
	`mÆloc
(
size
);

66 i‡(!
£nd_buf
) {

67 
	`ERROR_LOG
("mÆlo¯îr‹, %s", 
	`°ªº‹
(
î∫o
));

70 
£nd_buf_size
 = 
size
;

71 } i‡(
£nd_buf_size
 < 
£nd_Àn
 + 
size
) {

72 
£nd_buf
 = (
uöt8_t
*)
	`ªÆloc
(£nd_buf, 
£nd_Àn
 + 
size
);

73 i‡(!
£nd_buf
) {

74 
	`ERROR_LOG
("ªÆlo¯îr‹, %s", 
	`°ªº‹
(
î∫o
));

77 
£nd_buf_size
 = 
£nd_Àn
 + 
size
;

80 
	}
}

83 
	gfd_buff_t
::
	$de°roy
()

85 i‡(
£nd_buf
) {

86 
	`‰ì
(
£nd_buf
);

87 
£nd_buf
 = 0;

89 i‡(
ªcv_buf
) {

90 
	`munm≠
(
ªcv_buf
, 
∑ge_size
);

91 
ªcv_buf
 = 0;

93 i‡(
sw≠_ªcv_buf
) {

94 
	`munm≠
(
sw≠_ªcv_buf
, 
∑ge_size
);

95 
sw≠_ªcv_buf
 = 0;

97 
ªcv_Àn
 = 0;

98 
£nd_Àn
 = 0;

99 
	}
}

105 
	gSockëC⁄n
::
	$böd_udp_sockë
–c⁄° * 
ùaddr
, 
ö_p‹t_t
 
p‹t
 )

107 
îr
;

108 
li°ífd
;

109 
sockaddr_ö
 
£rvaddr
;

110 
	`mem£t
(&
£rvaddr
, 0, (servaddr));

111 
£rvaddr
.
sö_Ámûy
 = 
AF_INET
;

112 
£rvaddr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

113 i‡(
ùaddr
) {

114 
	`öë_±⁄
(
AF_INET
, 
ùaddr
, &
£rvaddr
.
sö_addr
);

116 
£rvaddr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

119 i‡((
li°ífd
 = 
	`sockë
(
AF_INET
,
SOCK_DGRAM
 , 0)) == -1) {

123 i‡(
	`böd
(
li°ífd
, (
sockaddr
*)&
£rvaddr
, (servaddr)) == -1) {

124 
îr
 = 
î∫o
;

125 
	`˛o£
(
li°ífd
);

126 
î∫o
 = 
îr
;

129 
	`ERROR_LOG
("böd_udp_sockë:dÿadd c⁄n[%d]",
li°ífd
);

131  
	`add_⁄e_c⁄n
(
li°ífd
, 
em_fd_ty≥_udp
, &
£rvaddr
, 0);

132 
	}
}

134 
boﬁ


135 
	gSockëC⁄n
::
	$is_Æl_£nd_ovî
()

137 
i
 = 0; i <
maxfd
; ++i) {

138 i‡–(
fds
[
i
].
ty≥
 =
em_fd_ty≥_ªmŸe
Ë&& (fds[i].
buff
.
£nd_Àn
 > 0) ) {

139  
Ál£
;

142  
åue
;

143 
	}
}

145 
uöt32_t


146 
	gSockëC⁄n
::
	$gë_ªmŸe_ù
(
fd
)

148 i‡((
fd
 >0Ë&& (fd <
maxfd
Ë&& (
fds
[fd].
ty≥
 !
em_fd_ty≥_unu£d
)) {

149  
fds
[
fd
].
ªmŸe
.
ù
;

153 
	}
}

156 
	gSockëC⁄n
::
	$öô
(
fd_num
, 
maxevíts
)

158 i‡((
ïfd
 = 
	`ïﬁl_¸óã
(
maxevíts
)) < 0) {

159 
	`ERROR_LOG
 ("ïﬁl_¸óã faûed, %s", 
	`°ªº‹
 (
î∫o
));

163 
evs
 = (
ïﬁl_evít
*)
	`ˇŒoc
(
maxevíts
, (epoll_event));

164 i‡(!
evs
) {

165 
	`˛o£
(
ïfd
);

166 
	`ERROR_LOG
("mÆlo¯ïﬁ»Áûed, size=%d", 
maxevíts
);

170 
fds
 = (
fd_öfo_t
*)
	`ˇŒoc
(
fd_num
, (fd_info_t));

171 i‡(!
fds
) {

172 
	`‰ì
(
evs
);

173 
	`ERROR_LOG
("mÆlo¯Áûed, size=%d", 
fd_num
);

177 
fd_idx
 = 0;

178 
maxfd
 = 0;

179 
max_ev_num
 = 
maxevíts
;

180 
	`INIT_LIST_HEAD
(&
ïﬁlö_hód
);

181 
	`INIT_LIST_HEAD
(&
˛o£_hód
);

183 
	}
}

206 
	gSockëC⁄n
::
	$£nd_d©a
(
fd
, c⁄° * 
d©a
, 
uöt32_t
 
Àn
)

208 
boﬁ
 
¥ev_£nd_Êag
 = 
Ál£
;

211 i‡(
fds
[
fd
].
buff
.
£nd_Àn
 > 0) {

212 i‡(
	`wrôe_to_c⁄n
(
fd
) == -1) {

213 
	`ERROR_LOG
("ÁûÅÿwrôêtÿc⁄n=%dÉº=%d %s", 
fd
, 
î∫o
, 
	`°ªº‹
(errno));

214 
	`dñ_⁄e_c⁄n
(
fd
, 
is_∑ª¡
);

217 
¥ev_£nd_Êag
 = 
åue
;

220 
£nd_byãs
 = 0;

222 i‡(
fds
[
fd
].
buff
.
£nd_Àn
 == 0) {

223 
£nd_byãs
 = 
	`ß„_t˝_£nd_n
(
fd
, 
d©a
, 
Àn
);

224 i‡(
£nd_byãs
 == -1) {

225 
	`ERROR_LOG
("ÁûÅÿwrôêtÿfd=%dÉº=%d %s", 
fd
, 
î∫o
, 
	`°ªº‹
(errno));

226 
	`dñ_⁄e_c⁄n
(
fd
, 
is_∑ª¡
);

232 i‡(
Àn
 > (
uöt32_t
)
£nd_byãs
){

233 
fds
[
fd
].
buff
.
	`öô_£nd_buff
(
Àn
 - 
£nd_byãs
);

234 
	`mem˝y
(
fds
[
fd
].
buff
.
£nd_buf
 + fds[fd].buff.
£nd_Àn
,

235 (*)
d©a
 + 
£nd_byãs
, 
Àn
 - send_bytes);

236 
fds
[
fd
].
buff
.
£nd_Àn
 +
Àn
 - 
£nd_byãs
;

237 i‡(
is_∑ª¡
 && (
g_£nd_buf_limô_size
 > 0)

238 && (
fds
[
fd
].
buff
.
£nd_Àn
 > 
g_£nd_buf_limô_size
)) {

239 
	`ERROR_LOG
("send bufÜimitÉxceeded: fd=%d buflen=%uÜimit=%u",

240 
fd
, 
fds
[fd].
buff
.
£nd_Àn
, 
g_£nd_buf_limô_size
);

241 
	`dñ_⁄e_c⁄n
(
fd
, 
is_∑ª¡
);

247 i‡(
fds
[
fd
].
buff
.
£nd_Àn
 > 0 && !
¥ev_£nd_Êag
) {

248 
	`mod_evíts
(
fd
, 
EPOLLOUT
 | 
EPOLLIN
);

249 } i‡(
¥ev_£nd_Êag
 && 
fds
[
fd
].
buff
.
£nd_Àn
 == 0) {

250 
	`mod_evíts
(
fd
, 
EPOLLIN
);

254 
	}
}

257 
	gSockëC⁄n
::
	$add_⁄e_c⁄n
(
fd
, 
uöt8_t
 
ty≥
, 
sockaddr_ö
 *
≥î
, 
BödEÀm
* 
böd_ñem
)

260 
uöt32_t
 
Êag
;

262 
ty≥
) {

263 
em_fd_ty≥_pùe
:

264 
em_fd_ty≥_mˇ°
:

265 
em_fd_ty≥_addr_mˇ°
:

266 
em_fd_ty≥_udp
:

267 
Êag
 = 
EPOLLIN
;

269 
em_fd_ty≥_asyn_c⁄√˘
:

270 
Êag
 = 
EPOLLOUT
;

273 
Êag
 = 
EPOLLIN
 | 
EPOLLET
;

277 i‡(
	`add_evíts
(
fd
, 
Êag
) == -1) {

281 
	`mem£t
(&
fds
[
fd
], 0x00, (
fd_öfo_t
));

282 
fds
[
fd
].
sockfd
 = fd;

283 
fds
[
fd
].
ty≥
 =Åype;

284 
fds
[
fd
].
id
 = ((++
fd_idx
)==0) ? (++fd_idx) : fd_idx;

289 i‡(
≥î
) {

290 
fds
[
fd
].
ªmŸe
.
ù
 = 
≥î
->
sö_addr
.
s_addr
;

291 
fds
[
fd
].
ªmŸe
.
p‹t
 = 
≥î
->
sö_p‹t
;

293 
fds
[
fd
].
böd_ñem
 = bind_elem;

294 
maxfd
 = maxfd > 
fd
 ? maxfd : fd;

296 
	`TRACE_LOG
("add fd=%d,Åy≥=%d, id=%u", 
fd
, 
ty≥
, 
fds
[fd].
id
);

298 
	}
}

301 
	gSockëC⁄n
::
	$dñ_⁄e_c⁄n
(
fd
, 
¥o˚ss_ty≥
)

303 i‡(
fds
[
fd
].
ty≥
 =
em_fd_ty≥_unu£d
)

306 i‡(
¥o˚ss_ty≥
 =
em_chûd_ty≥
) {

307 
g_dŒ
.
	`⁄_fd_˛o£d
(
fd
);

308 } i‡(
¥o˚ss_ty≥
 =
em_∑ª¡_ty≥
){

309 
shmq_block_t
 
blk
;

310 
blk
.
id
 = 
fds
[
fd
].id;

311 
blk
.
fd
 = fd;

312 
blk
.
ty≥
 = 
em_˛o£_block
;

313 
blk
.
Àn
 = (
shmq_block_t
);

314 
fds
[
fd
].
böd_ñem
->
ªcvq
.
	`push_d©a
(&
blk
, 
NULL
);

317 
	`dñ_‰om_ïﬁlö_queue
(
fd
);

318 
	`dñ_‰om_˛o£_queue
(
fd
);

320 
fds
[
fd
].
buff
.
	`de°roy
();

321 
fds
[
fd
].
ty≥
 = 
em_fd_ty≥_unu£d
;

324 
	`˛o£
(
fd
);

327 i‡(
maxfd
 =
fd
) {

328 
i
;

329 
i
 = 
fd
 - 1; i >= 0; i--) {

330 i‡(
fds
[
i
].
ty≥
 !
em_fd_ty≥_unu£d
) {

334 
maxfd
 = 
i
;

336 
	`TRACE_LOG
 ("˛o£ fd=%d", 
fd
);

337 
	}
}

340 
	gSockëC⁄n
::
	$›í_⁄e_c⁄n
(
fd
, 
¥o˚ss_ty≥
)

342 
sockaddr_ö
 
≥î
;

343 
√wfd
 = 
	`ß„_t˝_ac˚±
(
fd
, &
≥î
, 1);

344 i‡(
√wfd
 != -1) {

346 
	`add_⁄e_c⁄n
(
√wfd
, 
em_fd_ty≥_ªmŸe
, &
≥î
, 
fds
[
fd
].
böd_ñem
);

347 
fds
[
√wfd
].
ªmŸe
.
œ°_tm
 = 
	`gë_now_tv
()->
tv_£c
;

349 i‡(
¥o˚ss_ty≥
 =
em_∑ª¡_ty≥
) {

350 
shmq_block_t
 
blk
;

351 
blk
.
id
 = 
fds
[
√wfd
].id;

352 
blk
.
fd
 = 
√wfd
;

353 
blk
.
ty≥
 = 
em_›í_block
;

354 
blk
.
Àn
 = (blkË+ (
ªmŸe_öfo_t
);

355 i‡(
fds
[
√wfd
].
böd_ñem
->
ªcvq
.
	`push_d©a
(&
blk
, (c⁄° 
uöt8_t
 *)&fds[√wfd].
ªmŸe
) == -1) {

356 
	`dñ_⁄e_c⁄n
(
√wfd
, 2);

359 } i‡((
î∫o
 =
EMFILE
Ë|| (î∫ÿ=
ENFILE
)) {

360 
	`add_to_ïﬁlö_queue
(
fd
);

361 } i‡((
î∫o
 =
EAGAIN
Ë|| (î∫ÿ=
EWOULDBLOCK
)) {

362 
	`dñ_‰om_ïﬁlö_queue
(
fd
);

365  
√wfd
;

366 
	}
}

369 
	gSockëC⁄n
::
	$wrôe_to_c⁄n
(
fd
)

371 
£nd_byãs
;

373 
£nd_byãs
 = 
	`ß„_t˝_£nd_n
(
fd
, 
fds
[fd].
buff
.
£nd_buf
, fds[fd].buff.
£nd_Àn
);

374 i‡(
£nd_byãs
 == 0) {

376 } i‡(
£nd_byãs
 > 0) {

377 i‡((
uöt32_t
)
£nd_byãs
 < 
fds
[
fd
].
buff
.
£nd_Àn
) {

378 
	`memmove
(
fds
[
fd
].
buff
.
£nd_buf
, fds[fd].buff.£nd_bu‡+ 
£nd_byãs
,

379 
fds
[
fd
].
buff
.
£nd_Àn
 - 
£nd_byãs
);

382 
fds
[
fd
].
buff
.
£nd_Àn
 -
£nd_byãs
;

383 
fds
[
fd
].
ªmŸe
.
œ°_tm
 = 
	`gë_now_tv
()->
tv_£c
;

385 
	`ERROR_LOG
("ÁûedÅÿwrôêtÿfd=%dÉº=%d %s", 
fd
, 
î∫o
, 
	`°ªº‹
(errno));

389  
£nd_byãs
;

390 
	}
}

393 
	gSockëC⁄n
::
	$ªad_‰om_c⁄n
(
fd
, 
max
)

395 
ªcv_byãs
;

397 i‡(!
fds
[
fd
].
buff
.
ªcv_buf
 && (fds[fd].buff.
	`öô_ªcv_buff
()==-1)) {

401 i‡(
∑ge_size
 =()
fds
[
fd
].
buff
.
ªcv_Àn
) {

402 
	`ERROR_LOG
 ("ªcv buf„∏i†fuŒ, fd=%d", 
fd
);

406 
ªcv_byãs
 = 
	`ß„_t˝_ªcv
(
fd
, 
fds
[fd].
buff
.
ªcv_buf
 + fds[fd].buff.
ªcv_Àn
,

407 
max
 - 
fds
[
fd
].
buff
.
ªcv_Àn
);

408 i‡(
ªcv_byãs
 > 0) {

409 
fds
[
fd
].
buff
.
ªcv_Àn
 +
ªcv_byãs
;

410 
fds
[
fd
].
ªmŸe
.
œ°_tm
 = 
	`gë_now_tv
()->
tv_£c
;

412 } i‡(
ªcv_byãs
 == 0) {

413 
	`ERROR_LOG
("c⁄√˘i⁄ [fd=%d ip=0x%X] clo£d byÖìr", 
fd
, 
fds
[fd].
ªmŸe
.
ù
);

416 
	`ERROR_LOG
("ªcvÉº‹: fd=%dÉºmsg=%s", 
fd
, 
	`°ªº‹
(
î∫o
));

417 
ªcv_byãs
 = 0;

420 i‡(
fds
[
fd
].
buff
.
ªcv_Àn
 =(
uöt32_t
)
max
) {

421 
	`add_to_ïﬁlö_queue
(
fd
);

423 
	`dñ_‰om_ïﬁlö_queue
(
fd
);

426  
ªcv_byãs
;

427 
	}
}

430 
	gSockëC⁄n
::
	$add_evíts
(
fd
, 
uöt32_t
 
Êag
)

432 
ïﬁl_evít
 
ev
;

433 
ev
.
evíts
 = 
Êag
;

434 
ev
.
d©a
.
fd
 = fd;

436 
	`TRACE_LOG
("ïﬁl_˘»add %d", 
fd
);

437 
	`u∆ikñy
(
	`ïﬁl_˘l
(
ïfd
, 
EPOLL_CTL_ADD
, 
fd
, &
ev
) != 0)) {

438 i‡(
î∫o
 !
EINTR
) {

439 
	`ERROR_LOG
("ïﬁ»˘»add %dÉº‹: %m", 
fd
);

445 
	}
}

448 
	gSockëC⁄n
::
	$mod_evíts
(
fd
, 
uöt32_t
 
Êag
)

450 
ïﬁl_evít
 
ev
;

451 
ev
.
evíts
 = 
EPOLLET
 | 
Êag
;

452 
ev
.
d©a
.
fd
 = fd;

454 
	`u∆ikñy
(
	`ïﬁl_˘l
(
ïfd
, 
EPOLL_CTL_MOD
, 
fd
, &
ev
) != 0)) {

455 
	`ERROR_LOG
 ("ïﬁl_˘»mod %dÉº‹: %m", 
fd
);

456 i‡(
î∫o
 !
EINTR
) {

462 
	}
}

465 
	gSockëC⁄n
::
	$h™dÀ_pùe_evít
(
fd
, 
pos
, 
¥o˚ss_ty≥
)

467 
åash
[
åash_size
];

469 i‡(
evs
[
pos
].
evíts
 & 
EPOLLHUP
) {

470 i‡(
¥o˚ss_ty≥
 =
em_∑ª¡_ty≥
) {

471 
pfd
 = 
evs
[
pos
].
d©a
.
fd
;

472 
BödEÀm
* 
be
 = 
fds
[
pfd
].
böd_ñem
;

473 
	`CRIT_LOG
("CHILD PROCESS CRASHED!\t[ﬁid=%u o ame=%s]", 
be
->
£rvî_id
, be->
£rvî_«me
);

476 
i
;

477 
i
 = 0; i <
maxfd
; ++i) {

478 i‡((
fds
[
i
].
böd_ñem
 =
be
Ë&& (fds[i].
ty≥
 !
em_fd_ty≥_li°í
)) {

479 
	`dñ_⁄e_c⁄n
(
i
, 
¥o˚ss_ty≥
);

483 i‡(
be
->
ª°¨t_˙t
++ < 20) {

484 
g_w‹k_svr
.
	`ª°¨t_¥o˚ss
(
be
);

487 
	`CRIT_LOG
("PARENT PROCESS CRASHED!");

488 
g_d´m⁄
.
°›_Êag
 = 1;

492 
	`ªad
(
fd
, 
åash
, 
åash_size
) ==Årash_size) ;

496 
	}
}

499 
	gSockëC⁄n
::
	$h™dÀ_£nd_queue
()

501 
shmq_block_t
 *
blk
;

502 
i
 = 0;

503  ; 
i
 !
g_böds
.
böd_num
; ++i ) {

504 
ShmqQueue
* 
queue
 = &(
g_böds
.
c⁄figs
[
i
].
£ndq
);

505 
queue
->
	`p›_d©a
(&
blk
) == 0) {

506 
	`dól_block_d©a
(
blk
);

509 
	}
}

512 
	gSockëC⁄n
::
	$h™dÀ_ªcv_queue
()

514 
g_w‹k_svr
.
	`dól_ªcv_queue
();

515 
	}
}

518 
	gSockëC⁄n
::
	$dñ_‰om_˛o£_queue
(
fd
)

520 i‡(
fds
[
fd
].
Êag
 & 
CN_NEED_CLOSE
) {

521 
fds
[
fd
].
Êag
 &~
CN_NEED_CLOSE
;

522 
	`li°_dñ_öô
(&
fds
[
fd
].
li°
);

524 
	}
}

527 
	gSockëC⁄n
::
	$dñ_‰om_ïﬁlö_queue
(
fd
)

529 i‡(
fds
[
fd
].
Êag
 & 
CN_NEED_POLLIN
) {

530 
fds
[
fd
].
Êag
 &~
CN_NEED_POLLIN
;

531 
	`li°_dñ_öô
(&
fds
[
fd
].
li°
);

532 
	`TRACE_LOG
 ("dñ fd=%d fromÉtö queue", 
fd
);

534 
	}
}

537 
	gSockëC⁄n
::
	$add_to_ïﬁlö_queue
(
fd
)

539 i‡(!(
fds
[
fd
].
Êag
 & (
CN_NEED_CLOSE
 | 
CN_NEED_POLLIN
))) {

540 
	`li°_add_èû
(&
fds
[
fd
].
li°
, &
ïﬁlö_hód
);

541 
fds
[
fd
].
Êag
 |
CN_NEED_POLLIN
;

542 
	`TRACE_LOG
 ("add fd=%dÅÿëö queue", 
fd
);

544 
	}
}

547 
	gSockëC⁄n
::
	$add_to_˛o£_queue
(
fd
)

549 
	`dñ_‰om_ïﬁlö_queue
(
fd
);

550 i‡(!(
fds
[
fd
].
Êag
 & 
CN_NEED_CLOSE
)) {

551 
	`li°_add_èû
(&
fds
[
fd
].
li°
, &
˛o£_hód
);

552 
fds
[
fd
].
Êag
 |
CN_NEED_CLOSE
;

553 
	`TRACE_LOG
("add fd=%dÅÿ˛o£ queue, %x", 
fd
, 
fds
[fd].
Êag
);

555 
	}
}

558 
	gSockëC⁄n
::
	$ôî©e_˛o£_queue
()

560 
li°_hód
 *
l
, *
p
;

561 
fd_öfo_t
 *
öfo
;

563 
	`li°_f‹_óch_ß„
(
p
, 
l
, &
˛o£_hód
) {

564 
öfo
 = 
	`li°_íåy
(
p
, 
fd_öfo_t
, 
li°
);

565 i‡(
öfo
->
buff
.
£nd_Àn
 > 0) {

566 
	`wrôe_to_c⁄n
(
öfo
->
sockfd
);

568 
	`dñ_⁄e_c⁄n
(
öfo
->
sockfd
, 
is_∑ª¡
 ? 2 : 0);

570 
	}
}

573 
	gSockëC⁄n
::
	$ôî©e_ïﬁlö_queue
(
max_Àn
, 
¥o˚ss_ty≥
)

575 
li°_hód
 *
l
, *
p
;

576 
fd_öfo_t
 *
öfo
;

578 
	`li°_f‹_óch_ß„
(
p
, 
l
, &
ïﬁlö_hód
) {

579 
öfo
 = 
	`li°_íåy
(
p
, 
fd_öfo_t
, 
li°
);

580 i‡(
	`u∆ikñy
(
öfo
->
ty≥
 =
em_fd_ty≥_li°í
)) {

582 
	`›í_⁄e_c⁄n
(
öfo
->
sockfd
, 
¥o˚ss_ty≥
) > 0) ;

583 } i‡(
	`√t_ªcv
(
öfo
->
sockfd
, 
max_Àn
, 
¥o˚ss_ty≥
) == -1) {

584 
	`dñ_⁄e_c⁄n
(
öfo
->
sockfd
, 
¥o˚ss_ty≥
);

587 
	}
}

590 
	gSockëC⁄n
::
	$dól_block_d©a
(
shmq_block_t
 *
blk
)

592 
d©a_Àn
;

593 
fd
 = 
blk
->fd;

595 i‡(
	`u∆ikñy
((
fd
 > 
maxfd
) || (fd < 0))) {

596 
	`DEBUG_LOG
("discardÅhe block: blk->type=%d, fd=%d, maxfd=%d, id=%u",

597 
blk
->
ty≥
, 
fd
, 
maxfd
, blk->
id
);

601 i‡(
fds
[
fd
].
ty≥
 !
em_fd_ty≥_ªmŸe
 || 
blk
->
id
 != fds[fd].id) {

602 
	`TRACE_LOG
 ("c⁄√˘i⁄ %d clo£d, disˇrd %u, %u block", 
fd
, 
blk
->
id
, 
fds
[fd].id);

606 i‡(
blk
->
ty≥
 =
em_fö_block
 && 
fds
[
fd
].ty≥ !
em_fd_ty≥_li°í
) {

607 
	`add_to_˛o£_queue
 (
fd
);

612 
d©a_Àn
 = 
blk
->
Àn
 -  (
shmq_block_t
);

613  
	`√t_£nd
(
fd
, 
blk
->
d©a
, 
d©a_Àn
);

614 
	}
}

617 
	gSockëC⁄n
::
	$√t_ªcv
(
fd
, 
max
, 
¥o˚ss_ty≥
)

619 
ªcv_tm
 = 0;

621 
	`as£π
(
max
 <
∑ge_size
);

622 i‡(
fds
[
fd
].
ty≥
 =
em_fd_ty≥_pùe
) {

623 
	`ªad
(
fd
, 
fds
[fd].
buff
.
ªcv_buf
, 
max
);

626 i‡(
	`ªad_‰om_c⁄n
(
fd
, 
max
) == -1) {

627 
	`ERROR_LOG
("read from connÉrrror!");

631 
uöt8_t
* 
tmp_ªcv_buf
 = 
fds
[
fd
].
buff
.
ªcv_buf
;

632 
ªcv_agaö
:

633 i‡(
fds
[
fd
].
buff
.
ªcv_pkg_Àn
 == 0) {

634 
fds
[
fd
].
buff
.
ªcv_pkg_Àn
 = 
g_dŒ
.
	`gë_pkg_Àn
(fd, 
tmp_ªcv_buf
, fds[fd].buff.
ªcv_Àn
, 
¥o˚ss_ty≥
);

635 
	`TRACE_LOG
("h™dÀ_∑r£Öid=%dÑëu∫ %d, buf„∏Àn=%d, fd=%d", 
	`gëpid
(),

636 
fds
[
fd
].
buff
.
ªcv_pkg_Àn
, fds[fd].buff.
ªcv_Àn
, fd);

640 i‡(
	`u∆ikñy
(
fds
[
fd
].
buff
.
ªcv_pkg_Àn
 > (
uöt32_t
)
max
)) {

641 
	`ERROR_LOG
("ª˚ÖkgÜíÉº‹[%d %d]!",
fds
[
fd
].
buff
.
ªcv_pkg_Àn
, 
max
);

643 } i‡(
	`u∆ikñy
(
fds
[
fd
].
buff
.
ªcv_pkg_Àn
 == 0)) {

644 i‡(
fds
[
fd
].
buff
.
ªcv_Àn
 =(
uöt32_t
)
max
) {

645 
	`ERROR_LOG
("unsuµ‹ãdÖrŸocﬁ,Ñecv_Àn=%d", 
fds
[
fd
].
buff
.
ªcv_Àn
);

649 } i‡(
fds
[
fd
].
buff
.
ªcv_Àn
 >fds[fd].buff.
ªcv_pkg_Àn
) {

650 i‡(
¥o˚ss_ty≥
 =
em_chûd_ty≥
) {

651 
g_dŒ
.
	`¥oc_pkg_‰om_£rv
(
fd
, 
tmp_ªcv_buf
, 
fds
[fd].
buff
.
ªcv_pkg_Àn
);

652 i‡(
fds
[
fd
].
ty≥
 =
em_fd_ty≥_unu£d
) {

653  
ªcv_tm
;

656 
shmq_block_t
 
blk
;

657 
blk
.
id
 = 
fds
[
fd
].id;

658 
blk
.
fd
 = fd;

659 
blk
.
ty≥
 = 
em_d©a_block
;

660 
blk
.
Àn
 = 
fds
[
fd
].
buff
.
ªcv_pkg_Àn
 + (
shmq_block_t
);

661 i‡(
fds
[
fd
].
böd_ñem
->
ªcvq
.
	`push_d©a
(&
blk
, 
tmp_ªcv_buf
)) {

662 
	`ERROR_LOG
("shmqÖush d©®îr‹![fd=%d]", 
fd
);

667 
ªcv_tm
++;

669 i‡(
fds
[
fd
].
buff
.
ªcv_Àn
 > fds[fd].buff.
ªcv_pkg_Àn
) {

670 
tmp_ªcv_buf
 +
fds
[
fd
].
buff
.
ªcv_pkg_Àn
;

672 
fds
[
fd
].
buff
.
ªcv_Àn
 -fds[fd].buff.
ªcv_pkg_Àn
;

673 
fds
[
fd
].
buff
.
ªcv_pkg_Àn
 = 0;

674 i‡(
fds
[
fd
].
buff
.
ªcv_Àn
 > 0) {

675 
ªcv_agaö
;

679 i‡(
fds
[
fd
].
buff
.
ªcv_buf
 !
tmp_ªcv_buf
) {

680 i‡(
fds
[
fd
].
buff
.
ªcv_Àn
) {

682 
	`mem˝y
(
fds
[
fd
].
buff
.
sw≠_ªcv_buf
, 
tmp_ªcv_buf
, fds[fd].buff.
ªcv_Àn
);

683 
	`mem˝y
(
fds
[
fd
].
buff
.
ªcv_buf
, fds[fd].buff.
sw≠_ªcv_buf
, fds[fd].buff.
ªcv_Àn
);

687  
ªcv_tm
;

688 
	}
}

691 
	gSockëC⁄n
::
	$√t_lo›
(
timeout
, 
max_Àn
, 
¥o˚ss_ty≥
)

693 
	`ôî©e_˛o£_queue
();

694 
	`ôî©e_ïﬁlö_queue
(
max_Àn
, 
¥o˚ss_ty≥
);

697 
ƒ
 = 
	`ïﬁl_waô
(
ïfd
, 
evs
, 
max_ev_num
, 10);

698 i‡(
	`u∆ikñy
(
ƒ
 < 0 && 
î∫o
 !
EINTR
)) {

699 
	`ERROR_RETURN
(("ïﬁl_waô faûed, maxfd=%d,Épfd=%d: %m", 
maxfd
, 
ïfd
), -1);

702 
	`ª√w_now
();

704 i‡(
¥o˚ss_ty≥
 =
em_∑ª¡_ty≥
) {

705 
	`h™dÀ_£nd_queue
();

708 
pos
 = 0;Öo†< 
ƒ
;Öos++) {

709 
fd
 = 
evs
[
pos
].
d©a
.fd;

711 i‡(
fd
 > 
maxfd
 || 
fds
[fd].
sockfd
 !fd || fds[fd].
ty≥
 =
em_fd_ty≥_unu£d
) {

712 
	`ERROR_LOG
("delayedÉpollÉvents:Évent fd=%d, cache fd=%d, maxfd=%d,Åype=%d",

713 
fd
, 
fds
[fd].
sockfd
, 
maxfd
, fds[fd].
ty≥
);

717 i‡–
	`u∆ikñy
(
fds
[
fd
].
ty≥
 =
em_fd_ty≥_pùe
) ) {

718 i‡(
	`h™dÀ_pùe_evít
(
fd
, 
pos
, 
¥o˚ss_ty≥
) == 0) {

721 
	`ERROR_LOG
("fdÅy≥Éº‹![fd=%dÅy≥=%d]", 
fd
, 
fds
[fd].
ty≥
);

731 i‡(
evs
[
pos
].
evíts
 & 
EPOLLIN
) {

732 
fds
[
fd
].
ty≥
) {

733 
em_fd_ty≥_li°í
:

735 
	`›í_⁄e_c⁄n
(
fd
, 
¥o˚ss_ty≥
) > 0) ;

737 
em_fd_ty≥_mˇ°
:

739 
buf
[
mˇ°_pkg_size
];

740 
i
;

741 
i
 = 0; i != 100; ++i) {

742 
Àn
 = 
	`ªcv
(
fd
, 
buf
, 
mˇ°_pkg_size
, 
MSG_DONTWAIT
);

743 i‡(
Àn
 > 0) {

744 i‡(
g_dŒ
.
¥oc_mˇ°_pkg
) {

745 
g_dŒ
.
	`¥oc_mˇ°_pkg
((*)
buf
, 
Àn
);

753 
em_fd_ty≥_addr_mˇ°
:

755 
buf
[
mˇ°_pkg_size
];

756 
i
;

757 
i
 = 0; i != 100; ++i) {

758 
Àn
 = 
	`ªcv
(
fd
, 
buf
, 
mˇ°_pkg_size
, 
MSG_DONTWAIT
);

759 i‡(
Àn
 > 0) {

760 
g_mˇ°
.
	`async£rv_¥oc_mˇ°_pkg
(
buf
, 
Àn
);

767 
em_fd_ty≥_udp
:

769 
buf
[
udp_pkg_size
];

770 
i
;

771 
i
 = 0; i != 100; ++i) {

772 
sockaddr_ö
 
‰om
;

773 
sockÀn_t
 
‰omÀn
;

774 
Àn
 = 
	`ªcv‰om
(
fd
, 
buf
, 
udp_pkg_size
, 
MSG_DONTWAIT
,

775 (
sockaddr
*)(&
‰om
), &
‰omÀn
);

776 i‡(
Àn
 > 0) {

777 
g_dŒ
.
	`¥oc_udp_pkg
(
fd
, 
buf
, 
Àn
, &
‰om
, 
‰omÀn
);

786 i‡(
	`√t_ªcv
(
fd
, 
max_Àn
, 
¥o˚ss_ty≥
) == -1) {

787 
	`dñ_⁄e_c⁄n
(
fd
, 
¥o˚ss_ty≥
);

793 i‡(
evs
[
pos
].
evíts
 & 
EPOLLOUT
) {

794 i‡(
fds
[
fd
].
buff
.
£nd_Àn
 > 0 && 
	`wrôe_to_c⁄n
(fd) == -1) {

795 
	`dñ_⁄e_c⁄n
(
fd
, 
¥o˚ss_ty≥
);

797 i‡(
fds
[
fd
].
buff
.
£nd_Àn
 == 0) {

798 
	`mod_evíts
(
fd
, 
EPOLLIN
);

802 i‡(
evs
[
pos
].
evíts
 & 
EPOLLHUP
) {

803 
	`dñ_⁄e_c⁄n
(
fd
, 
¥o˚ss_ty≥
);

807 i‡(
¥o˚ss_ty≥
 =
em_∑ª¡_ty≥
 && 
sockë_timeout
) {

808 
i
;

809 
i
 = 0; i <
maxfd
; ++i) {

810 i‡((
fds
[
i
].
ty≥
 =
em_fd_ty≥_ªmŸe
)

811 && ((
	`gë_now_tv
()->
tv_£c
 - 
fds
[
i
].
ªmŸe
.
œ°_tm
Ë>
sockë_timeout
)) {

812 
	`dñ_⁄e_c⁄n
(
i
, 
¥o˚ss_ty≥
);

817 if(
¥o˚ss_ty≥
 =
em_chûd_ty≥
) {

818 i‡(
g_dŒ
.
¥oc_evíts
) {

819 
g_dŒ
.
	`¥oc_evíts
();

821 
	`h™dÀ_ªcv_queue
();

823 
g_mˇ°
.
	`syn_addr_öfo
();

827 
	}
}

830 
	gSockëC⁄n
::
	$exô
()

832 
i
;

833 
i
 = 0; i < 
maxfd
 + 1; i++) {

834 i‡(
fds
[
i
].
ty≥
 =
em_fd_ty≥_unu£d
) {

837 
fds
[
i
].
buff
.
	`de°roy
();

838 
	`˛o£
 (
i
);

841 
	`‰ì
(
fds
);

842 
	`‰ì
(
evs
);

843 
	`˛o£
(
ïfd
);

844 
	}
}

	@socket.hpp

1 #i‚de‡
ASYNC_SERVER_NET_H_


2 
	#ASYNC_SERVER_NET_H_


	)

5 
	~<time.h
>

7 
	~<°döt.h
>

9 
	~<√töë/ö.h
>

10 
	~<sys/sockë.h
>

12 
	~<sys/ïﬁl.h
>

13 
	~<sys/mm™.h
>

15 
	~<libcomm⁄/li°.h
>

16 
	~"shmq.hµ
"

18 
	#CN_NEED_CLOSE
 0x01

	)

19 
	#CN_NEED_POLLIN
 0x02

	)

21 
	efd_ty≥_t
 {

22 
	mem_fd_ty≥_unu£d
 = 0,

23 
	mem_fd_ty≥_li°í
,

24 
	mem_fd_ty≥_pùe
,

25 
	mem_fd_ty≥_ªmŸe
,

26 
	mem_fd_ty≥_mˇ°
,

27 
	mem_fd_ty≥_addr_mˇ°
,

28 
	mem_fd_ty≥_udp
,

29 
	mem_fd_ty≥_asyn_c⁄√˘


33 
	sfd_buff_t
 {

34 
uöt32_t
 
	mªcv_pkg_Àn
;

35 
uöt32_t
 
	mªcv_Àn
;

36 
uöt8_t
* 
	mªcv_buf
;

37 
uöt8_t
* 
	msw≠_ªcv_buf
;

39 
uöt32_t
 
	m£nd_buf_size
;

40 
uöt32_t
 
	m£nd_Àn
;

41 
uöt8_t
* 
	m£nd_buf
;

43 
öô_£nd_buff
(
uöt32_t
 
size
);

44 
öô_ªcv_buff
();

45 
de°roy
();

48 
	sªmŸe_öfo_t
 {

49 
uöt32_t
 
	mù
;

50 
uöt16_t
 
	mp‹t
;

51 
uöt32_t
 
	mœ°_tm
;

52 } 
__©åibuã__
((
∑cked
));

54 
˛ass
 
	gBödEÀm
;

55 
	sfd_öfo_t
 {

56 
uöt32_t
 
	mid
;

57 
	msockfd
;

58 
uöt8_t
 
	mty≥
;

59 
uöt8_t
 
	mÊag
;

61 
ªmŸe_öfo_t
 
	mªmŸe
;

62 
fd_buff_t
 
	mbuff
;

63 
BödEÀm
* 
	mböd_ñem
;

65 
li°_hód_t
 
	mli°
;

68 ˛as†
	cSockëC⁄n
 {

69 
	mpublic
:

70 
	$SockëC⁄n
(){}

71 ~
	$SockëC⁄n
(){
	}
}

73 
öô
(
size
, 
maxevíts
);

74 
£nd_d©a
(
fd
, c⁄° * 
d©a
, 
uöt32_t
 
Àn
);

75 
wrôe_to_c⁄n
(
fd
);

76 
√t_lo›
(
timeout
, 
max_Àn
, 
¥o˚ss_ty≥
);

77 
add_⁄e_c⁄n
(
fd
, 
uöt8_t
 
ty≥
, 
sockaddr_ö
 *
≥î
, 
BödEÀm
* 
böd_ñem
);

78 
dñ_⁄e_c⁄n
(
fd
, 
¥o˚ss_ty≥
);

79 
exô
();

81 
boﬁ
 
is_Æl_£nd_ovî
();

82 
uöt32_t
 
gë_ªmŸe_ù
(
fd
);

84 
böd_udp_sockë
(c⁄° * 
ùaddr
, 
ö_p‹t_t
 
p‹t
);

85 
	g¥iv©e
:

86 
add_evíts
(
fd
, 
uöt32_t
 
Êag
);

87 
mod_evíts
(
fd
, 
uöt32_t
 
Êag
);

88 
ªad_‰om_c⁄n
(
fd
, 
max
);

89 
›í_⁄e_c⁄n
(
fd
, 
¥o˚ss_ty≥
);

90 
√t_ªcv
(
fd
, 
max
, 
¥o˚ss_ty≥
);

92 
dól_block_d©a
(
shmq_block_t
 *
blk
);

93 
h™dÀ_pùe_evít
(
fd
, 
pos
, 
¥o˚ss_ty≥
);

95 
h™dÀ_£nd_queue
();

96 
h™dÀ_ªcv_queue
();

98 
dñ_‰om_˛o£_queue
(
fd
);

99 
dñ_‰om_ïﬁlö_queue
(
fd
);

100 
add_to_ïﬁlö_queue
(
fd
);

101 
add_to_˛o£_queue
(
fd
);

102 
ôî©e_˛o£_queue
();

103 
ôî©e_ïﬁlö_queue
(
max_Àn
, 
¥o˚ss_ty≥
);

105 
	g¥iv©e
:

106 
maxfd
;

107 
	gfd_idx
;

108 
fd_öfo_t
* 
	gfds
;

110 
	gïfd
;

111 
	gmax_ev_num
;

112 
ïﬁl_evít
* 
	gevs
;

114 
li°_hód_t
 
	g˛o£_hód
;

115 
li°_hód_t
 
	gïﬁlö_hód
;

118 
SockëC⁄n
 
g_sock_c⁄n
;

	@util.hpp

1 #i‚de‡
ASYNC_SERVER_UTIL_H_


2 
	#ASYNC_SERVER_UTIL_H_


	)

5 
	~<libcomm⁄/log.h
>

6 
	~<libcomm⁄/c⁄f_∑r£r/c⁄fig.h
>

9 #ifde‡ 
likñy


10 #unde‡
likñy


12 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

14 #ifde‡ 
u∆ikñy


15 #unde‡
u∆ikñy


17 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

19 
ölöe
 
	$öô_logfûe
(
£rvî_id
 = 0)

21 
¥efix
[10] = {0};

22 i‡(
£rvî_id
 > 0) {

23 
Àn
 = 
	`¢¥ötf
(
¥efix
, 8, "%u", 
£rvî_id
);

24 
¥efix
[
Àn
] = '_';

27 c⁄° * 
log_dú
 = 
	`c⁄fig_gë_°rvÆ
("log_dir");

28 
log_lvl_t
 
log_lv
 = (log_lvl_t)
	`c⁄fig_gë_ötvÆ
("log_Àvñ", 
log_lvl_åa˚
);

29 
uöt32_t
 
log_size
 = 
	`c⁄fig_gë_ötvÆ
("log_size", 1<<30);

30 
uöt32_t
 
maxfûes
 = 
	`c⁄fig_gë_ötvÆ
("max_log_files", 100);

31 c⁄° * 
log_¥e
 = 
¥efix
;

32 
ªt
 = 
	`log_öô
(
log_dú
, 
log_lv
, 
log_size
, 
maxfûes
, 
log_¥e
);

34 
	`BOOT_LOG
(
ªt
, "£àlog dú %s,Öî fûêsizê%gMB", 
log_dú
, 
log_size
 / 1024.0 / 1024.0);

35 
	}
}

	@worker.cpp

1 
	~<as£π.h
>

2 
	~<î∫o.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

6 
	~<uni°d.h
>

8 
	~<glib.h
>

11 
	~<libcomm⁄/log.h
>

12 
	~<libcomm⁄/time/time.h
>

13 
	~<libcomm⁄/c⁄f_∑r£r/c⁄fig.h
>

15 
	~"d´m⁄.hµ
"

16 
	~"shmq.hµ
"

17 
	~"dŒ.hµ
"

18 
	~"mˇ°.hµ
"

19 
	~"utû.hµ
"

21 
	~"w‹kî.hµ
"

22 
	~"√t_if.hµ
"

24 
is_∑ª¡
 = 1;

25 
W‹kî
 
	gg_w‹k_svr
;

27 
ölöe
 

28 
	$‰ì_fd£ss
(* 
fd£ss
)

30 
	`g_¶i˚_‰ì1
((
fd£ssi⁄_t
), 
fd£ss
);

31 
	}
}

33 
	gW‹kî
::
	$W‹kî
()

35 
my_böd_ñem
 = 0;

36 
	}
}

38 
	gW‹kî
::~
	$W‹kî
()

40 
my_böd_ñem
 = 0;

41 
	}
}

43 
fd£ssi⁄_t
*

44 
	gW‹kî
::
	$gë_fd£ss
(
fd
)

46  (
fd£ssi⁄_t
*)
	`g_hash_èbÀ_lookup
(
fds
.
li°
, &
fd
);

47 
	}
}

50 
	gW‹kî
::
	$add_fd£ss
(
fd£ssi⁄_t
* 
fd£ss
)

52 
	`g_hash_èbÀ_ö£π
(
fds
.
li°
, &(
fd£ss
->
fd
), fdsess);

53 ++(
fds
.
cou¡
);

54 
	}
}

57 
	gW‹kî
::
	$ªmove_fd£ss
(
fd
)

59 
	`g_hash_èbÀ_ªmove
(
fds
.
li°
, &
fd
);

60 --(
fds
.
cou¡
);

61 
	}
}

64 
	gW‹kî
::
	$push_block_d©a
(
shmq_block_t
* 
blk
, c⁄° * 
d©a
)

66  
my_böd_ñem
->
£ndq
.
	`push_d©a
(
blk
,
d©a
);

67 
	}
}

70 
	gW‹kî
::
	$h™dÀ_öô
()

72 
fds
.
li°
 = 
	`g_hash_èbÀ_√w_fuŒ
(
g_öt_hash
, 
g_öt_equÆ
, 0, 
‰ì_fd£ss
);

75 
g_sock_c⁄n
.
	`öô
(
g_d´m⁄
.
max_fd_num
, 2000);

76 
my_böd_ñem
->
	`add_pùe_c⁄n
(
em_ªcv_pùe
);

77 
	`TRACE_LOG
("£rvi˚.˝p:dÿadd c⁄n[%d]",
my_böd_ñem
->
ªcvq
.
	`gë_pùe_h™dÀ
(0));

80 i‡(
g_dŒ
.
¥oc_mˇ°_pkg
 && (
g_mˇ°
.
	`asynsvr_¸óã_mˇ°_sockë
() == -1)) {

85 i‡(
	`c⁄fig_gë_°rvÆ
("addr_mcast_ip")) {

86 i‡(
g_mˇ°
.
	`¸óã_addr_mˇ°_sockë
() == 0) {

87 
g_mˇ°
.
	`£nd_addr_mˇ°_pkg
(
addr_mˇ°_1°_pkg
);

93  (
g_dŒ
.
öô_£rvi˚
 ? g_dŒ.
	`öô_£rvi˚
(0) : 0);

94 
	}
}

97 
	gW‹kî
::
	$h™dÀ_föi
()

99 i‡(!
g_sock_c⁄n
.
	`is_Æl_£nd_ovî
()) {

103 i‡–
g_dŒ
.
föi_£rvi˚
 && (g_dŒ.
	`föi_£rvi˚
(0) != 0) ) {

107 
	`g_hash_èbÀ_de°roy
(
fds
.
li°
);

109 
	}
}

112 
	gW‹kî
::
	$dól_›í_block
(c⁄° 
shmq_block_t
* 
blk
)

114 
fd£ssi⁄_t
* 
fd£ss
 = 
	`gë_fd£ss
(
blk
->
fd
);

115 i‡(
fd£ss
 || (
blk
->
Àn
 !((
shmq_block_t
Ë+ (
ªmŸe_öfo_t
)))) {

116 
	`ERROR_LOG
("dól_›í_block , fd=%dÜígth=%d", 
blk
->
fd
, blk->
Àn
);

119 
fd£ss
 = (
fd£ssi⁄_t
*)
	`g_¶i˚_Æloc
( *fdsess);

120 
fd£ss
->
fd
 = 
blk
->fd;

121 
fd£ss
->
id
 = 
blk
->id;

122 
fd£ss
->
ªmŸe_p‹t
 = *(
uöt16_t
*)
blk
->
d©a
;

123 
fd£ss
->
ªmŸe_ù
 = *(
uöt32_t
*)&
blk
->
d©a
[2];

124 
	`add_fd£ss
(
fd£ss
);

128 
	}
}

131 
	gW‹kî
::
	$dól_d©a_block
(
uöt8_t
* 
ªcvbuf
, 
rcvÀn
, 
fd
)

133 
fd£ssi⁄_t
* 
fd£ss
 = 
	`gë_fd£ss
(
fd
);

134 i‡(
fd£ss
) {

135 i‡(
g_dŒ
.
	`¥oc_pkg_‰om_˛õ¡
(
ªcvbuf
, 
rcvÀn
, 
fd£ss
)) {

136 
	`˛o£_˛õ¡_c⁄n
(
fd
);

139 
	}
}

142 
	gW‹kî
::
	$dól_ªcv_queue
()

144 
ShmqQueue
* 
ªcvq
 = &(
my_böd_ñem
->recvq);

145 
ShmqQueue
* 
£ndq
 = &(
my_böd_ñem
->sendq);

147 
shmq_block_t
* 
blk
;

148 
ªcvq
->
	`p›_d©a
(&
blk
) == 0) {

149 
blk
->
ty≥
) {

150 
em_›í_block
:

151 i‡(
	`dól_›í_block
(
blk
) == -1) {

152 
blk
->
ty≥
 = 
em_fö_block
;

153 
blk
->
Àn
 = (*blk);

154 
£ndq
->
	`push_d©a
(
blk
, 
NULL
);

157 
em_˛o£_block
:

158 
	`dól_˛o£_block
(
blk
->
fd
);

160 
em_d©a_block
:

161 i‡(
blk
->
Àn
 > (*blk)) {

162 
	`dól_d©a_block
(
blk
->
d©a
, blk->
Àn
 - (*blk), blk->
fd
);

169 
	}
}

172 
	gW‹kî
::
	$dól_˛o£_block
(
fd
)

174 
fd£ssi⁄_t
* 
fd£ss
 = 
	`gë_fd£ss
(
fd
);

175 i‡(!
fd£ss
) {

176 
	`ERROR_RETURN
–("c⁄√˘i⁄ %d hadáÃódy bì¿˛o£d", 
fd
), -1 );

178 
	`as£π
(
fds
.
cou¡
 > 0);

180 
g_dŒ
.
	`⁄_˛õ¡_c⁄n_˛o£d
(
fd
);

181 
	`ªmove_fd£ss
(
fd
);

183 
	}
}

186 
	gW‹kî
::
	$run_chûd_¥o˚ss
(
my_ñem_idx
, 
öhîô_idx
)

189 
is_∑ª¡
 = 0;

190 
my_böd_ñem
 = &(
g_böds
.
c⁄figs
[
my_ñem_idx
]);

191 
timeout
 = 
	`c⁄fig_gë_ötvÆ
("net_loop_interval", 100);

192 
	`öô_logfûe
(
my_böd_ñem
->
£rvî_id
);

195 
g_böds
.
	`˛o£_shmq_pùes
(
öhîô_idx
, 
em_chûd_ty≥
);

196 
g_böds
.
	`de°roy_Æl_shmq_ex˚≥t_⁄e
(
my_böd_ñem
);

197 
g_sock_c⁄n
.
	`exô
();

199 
g_d´m⁄
.
	`£t_¥oc_tôÀ
("%s-%u", g_d´m⁄.
¥og_«me
, 
my_böd_ñem
->
£rvî_id
);

201 i‡(
	`h™dÀ_öô
() != 0 ) {

202 
	`ERROR_LOG
("failÅo init workerÖrocess. olid=%u olname=%s",

203 
my_böd_ñem
->
£rvî_id
, my_böd_ñem->
£rvî_«me
);

204 
Áû
;

207 i‡(
timeout
 < 0 ||Åimeout > 1000) {

208 
timeout
 = 100;

211  !
g_d´m⁄
.
°›_Êag
 || !
	`h™dÀ_föi
() ) {

212 
g_sock_c⁄n
.
	`√t_lo›
(
timeout
, 
∑ge_size
, 0);

215 
Áû
:

216 
my_böd_ñem
->
	`de°roy_shmq
();

217 
g_sock_c⁄n
.
	`exô
();

218 
g_dŒ
.
	`uƒegi°î_∂ugö
();

219 
g_d´m⁄
.
	`föi_‰ì
();

221 
	`exô
(0);

222 
	}
}

225 
	gW‹kî
::
	$ª°¨t_¥o˚ss
(
BödEÀm
* 
böd_ñem
)

228 
	`˛o£
(
böd_ñem
->
ªcvq
.
	`gë_pùe_h™dÀ
(1));

229 
g_sock_c⁄n
.
	`dñ_⁄e_c⁄n
(
böd_ñem
->
£ndq
.
	`gë_pùe_h™dÀ
(0), 2);

230 
böd_ñem
->
	`de°roy_shmq
();

231 
böd_ñem
->
	`öô_shmq
();

233 
i
 = 
g_böds
.
	`gë_böd_c⁄f_idx
(
böd_ñem
);

234 
pid_t
 
pid
;

236 i‡–(
pid
 = 
	`f‹k
 ()) < 0 ) {

237 
	`CRIT_LOG
("f‹k faûed: %s", 
	`°ªº‹
(
î∫o
));

238 } i‡(
pid
 > 0) {

239 
böd_ñem
->
	`˛o£_shmq
(
em_∑ª¡_ty≥
);

240 
böd_ñem
->
	`add_pùe_c⁄n
(
em_£nd_pùe
);

241 
g_d´m⁄
.
	`£t_chûd_pid
(
i
,
pid
);

242 
	`TRACE_LOG
("£rvi˚.˝p:dÿadd c⁄n[%d]",
böd_ñem
->
ªcvq
.
	`gë_pùe_h™dÀ
(0));

244 
	`run_chûd_¥o˚ss
(
i
, 
g_böds
.
böd_num
);

246 
	}
}

	@worker.hpp

1 #i‚de‡
ASYNC_SERVER_WORKER_H_


2 
	#ASYNC_SERVER_WORKER_H_


	)

4 
	~<time.h
>

7 
	~<glib/ghash.h
>

10 
	~"bödög.hµ
"

11 
	~"√t_if.hµ
"

13 
	sfd_hashli°_t
 {

14 
cou¡
;

15 
GHashTabÀ
* 
li°
;

18 
is_∑ª¡
;

20 ˛as†
	cW‹kî
 {

21 
	mpublic
:

22 
W‹kî
();

23 ~
W‹kî
();

25 c⁄° 
BödEÀm
* 
	$gë_c⁄fig
()

26 {  
my_böd_ñem
; }

28 
	`run_chûd_¥o˚ss
(
my_ñem_idx
, 
öhîô_idx
);

29 
	`ª°¨t_¥o˚ss
(
BödEÀm
* 
böd_ñem
);

30 
fd£ssi⁄_t
* 
	`gë_fd£ss
(
fd
);

31 
	`ªmove_fd£ss
(
fd
);

32 
	`push_block_d©a
(
shmq_block_t
* 
blk
, c⁄° * 
d©a
);

33 
	`dól_ªcv_queue
();

34 
¥iv©e
:

35 
	`add_fd£ss
(
fd£ssi⁄_t
* 
fd£ss
);

37 
	`h™dÀ_öô
();

38 
	`h™dÀ_föi
();

40 
	`dól_›í_block
(c⁄° 
shmq_block_t
* 
blk
);

41 
	`dól_˛o£_block
(
fd
);

42 
	`dól_d©a_block
(
uöt8_t
* 
ªcvbuf
, 
rcvÀn
, 
fd
);

43 
¥iv©e
:

44 
BödEÀm
* 
my_böd_ñem
;

45 
fd_hashli°_t
 
fds
;

46 
	}
};

48 
W‹kî
 
g_w‹k_svr
;

	@
1
.
0
29
493
binding.cpp
binding.hpp
build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c
build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp
daemon.cpp
daemon.hpp
dll.cpp
dll.hpp
main.cpp
mcast.cpp
mcast.hpp
net_if.cpp
net_if.hpp
sample/client.c
sample/test.cpp
sample/test.hpp
sample_protobuf/client.c
sample_protobuf/dispatch.cpp
sample_protobuf/dispatch.hpp
sample_protobuf/test.cpp
sample_protobuf/test.hpp
sample_protobuf/test.pb.h
shmq.cpp
shmq.hpp
socket.cpp
socket.hpp
util.hpp
worker.cpp
worker.hpp
